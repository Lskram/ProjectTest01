// lib/routes/app_routes.dart
/// üó∫Ô∏è Office Syndrome Helper - Application Routes
/// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î route paths ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ

abstract class AppRoutes {
  // === CORE PAGES ===
  /// ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô - Splash Screen
  static const String splash = '/';
  
  /// ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏õ‡∏ß‡∏î
  static const String questionnaire = '/questionnaire';
  
  /// ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å - Dashboard
  static const String home = '/home';
  
  /// ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏≥‡∏ó‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢
  static const String todo = '/todo';
  
  /// ‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
  static const String settings = '/settings';
  
  /// ‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
  static const String statistics = '/statistics';
  
  // === SUB PAGES ===
  /// ‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  static const String notificationSettings = '/settings/notifications';
  
  /// ‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
  static const String permissionSettings = '/settings/permissions';
  
  /// ‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà
  static const String batteryOptimization = '/settings/battery';
  
  /// ‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ò‡∏µ‡∏°
  static const String themeSettings = '/settings/theme';
  
  /// ‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏†‡∏≤‡∏©‡∏≤
  static const String languageSettings = '/settings/language';
  
  /// ‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏Å‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á
  static const String accessibilitySettings = '/settings/accessibility';
  
  /// ‡∏´‡∏ô‡πâ‡∏≤‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  static const String dataExport = '/settings/export';
  
  /// ‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏≠‡∏õ
  static const String aboutApp = '/settings/about';
  
  // === STATISTICS SUB PAGES ===
  /// ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
  static const String dailyStats = '/statistics/daily';
  
  /// ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
  static const String weeklyStats = '/statistics/weekly';
  
  /// ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
  static const String monthlyStats = '/statistics/monthly';
  
  /// ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏õ‡∏ß‡∏î
  static const String painPointStats = '/statistics/pain-points';
  
  /// ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏£‡∏•‡∏∏‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
  static const String achievementStats = '/statistics/achievements';
  
  // === SPECIAL PAGES ===
  /// ‡∏´‡∏ô‡πâ‡∏≤‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î - 404
  static const String notFound = '/404';
  
  /// ‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
  static const String error = '/error';
  
  /// ‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á
  static const String unauthorized = '/unauthorized';
  
  /// ‡∏´‡∏ô‡πâ‡∏≤‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤
  static const String maintenance = '/maintenance';
  
  // === DEVELOPMENT ONLY ===
  /// ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö (Development only)
  static const String debug = '/debug';
  
  /// ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á Widgets ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
  static const String widgetDemo = '/demo/widgets';
  
  /// ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  static const String notificationTest = '/demo/notifications';
  
  // === ROUTE GROUPS ===
  /// ‡∏Å‡∏•‡∏∏‡πà‡∏° routes ‡∏´‡∏•‡∏±‡∏Å
  static const List<String> mainRoutes = [
    splash,
    questionnaire,
    home,
    todo,
    settings,
    statistics,
  ];
  
  /// ‡∏Å‡∏•‡∏∏‡πà‡∏° routes ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
  static const List<String> settingsRoutes = [
    notificationSettings,
    permissionSettings,
    batteryOptimization,
    themeSettings,
    languageSettings,
    accessibilitySettings,
    dataExport,
    aboutApp,
  ];
  
  /// ‡∏Å‡∏•‡∏∏‡πà‡∏° routes ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
  static const List<String> statisticsRoutes = [
    dailyStats,
    weeklyStats,
    monthlyStats,
    painPointStats,
    achievementStats,
  ];
  
  /// ‡∏Å‡∏•‡∏∏‡πà‡∏° routes ‡∏û‡∏¥‡πÄ‡∏®‡∏©
  static const List<String> specialRoutes = [
    notFound,
    error,
    unauthorized,
    maintenance,
  ];
  
  /// ‡∏Å‡∏•‡∏∏‡πà‡∏° routes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏±‡∏í‡∏ô‡∏≤
  static const List<String> debugRoutes = [
    debug,
    widgetDemo,
    notificationTest,
  ];
  
  // === ROUTE UTILITIES ===
  
  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô main route ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  static bool isMainRoute(String route) {
    return mainRoutes.contains(route);
  }
  
  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô settings route ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  static bool isSettingsRoute(String route) {
    return settingsRoutes.contains(route) || route.startsWith('/settings');
  }
  
  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô statistics route ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  static bool isStatisticsRoute(String route) {
    return statisticsRoutes.contains(route) || route.startsWith('/statistics');
  }
  
  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô debug route ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  static bool isDebugRoute(String route) {
    return debugRoutes.contains(route) || route.startsWith('/debug') || route.startsWith('/demo');
  }
  
  /// ‡∏£‡∏±‡∏ö parent route
  static String getParentRoute(String route) {
    final segments = route.split('/');
    if (segments.length <= 2) return '/';
    
    segments.removeLast();
    return segments.join('/');
  }
  
  /// ‡∏£‡∏±‡∏ö route hierarchy
  static List<String> getRouteHierarchy(String route) {
    final segments = route.split('/').where((s) => s.isNotEmpty).toList();
    final hierarchy = <String>[];
    
    String currentPath = '';
    for (final segment in segments) {
      currentPath += '/$segment';
      hierarchy.add(currentPath);
    }
    
    return hierarchy;
  }
  
  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á breadcrumb navigation
  static List<RouteInfo> getBreadcrumbs(String currentRoute) {
    final breadcrumbs = <RouteInfo>[];
    final hierarchy = getRouteHierarchy(currentRoute);
    
    for (final route in hierarchy) {
      breadcrumbs.add(RouteInfo(
        path: route,
        name: _getRouteName(route),
        isActive: route == currentRoute,
      ));
    }
    
    return breadcrumbs;
  }
  
  /// ‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á route
  static String _getRouteName(String route) {
    switch (route) {
      case splash:
        return '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô';
      case questionnaire:
        return '‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°';
      case home:
        return '‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å';
      case todo:
        return '‡∏ó‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢';
      case settings:
        return '‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤';
      case statistics:
        return '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥';
      case notificationSettings:
        return '‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô';
      case permissionSettings:
        return '‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á';
      case batteryOptimization:
        return '‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà';
      case themeSettings:
        return '‡∏ò‡∏µ‡∏°';
      case languageSettings:
        return '‡∏†‡∏≤‡∏©‡∏≤';
      case accessibilitySettings:
        return '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á';
      case dataExport:
        return '‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
      case aboutApp:
        return '‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÅ‡∏≠‡∏õ';
      case dailyStats:
        return '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô';
      case weeklyStats:
        return '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå';
      case monthlyStats:
        return '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô';
      case painPointStats:
        return '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏õ‡∏ß‡∏î';
      case achievementStats:
        return '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à';
      case notFound:
        return '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡πâ‡∏≤';
      case error:
        return '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î';
      case unauthorized:
        return '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå';
      case maintenance:
        return '‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤';
      default:
        // ‡πÅ‡∏õ‡∏•‡∏á path ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ
        final segments = route.split('/');
        final lastSegment = segments.isNotEmpty ? segments.last : '';
        return lastSegment.replaceAll('-', ' ').replaceAll('_', ' ');
    }
  }
  
  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ route ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ authentication ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  static bool requiresAuth(String route) {
    // ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏°‡∏µ authentication ‡πÅ‡∏ï‡πà‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
    return false;
  }
  
  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ route ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ permissions ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  static bool requiresPermissions(String route) {
    final permissionRequiredRoutes = [
      home,
      todo,
      notificationSettings,
    ];
    return permissionRequiredRoutes.contains(route);
  }
  
  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ route ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ setup ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  static bool requiresSetup(String route) {
    final setupRequiredRoutes = [
      home,
      todo,
      statistics,
    ];
    return setupRequiredRoutes.contains(route);
  }
  
  /// ‡∏£‡∏±‡∏ö default route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà
  static String getDefaultRouteForNewUser() {
    return questionnaire;
  }
  
  /// ‡∏£‡∏±‡∏ö default route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πà‡∏≤
  static String getDefaultRouteForExistingUser() {
    return home;
  }
}

/// üìã Route Information Model
class RouteInfo {
  final String path;
  final String name;
  final bool isActive;
  final Map<String, dynamic>? arguments;
  final List<String>? requiredPermissions;
  final bool requiresSetup;
  
  const RouteInfo({
    required this.path,
    required this.name,
    this.isActive = false,
    this.arguments,
    this.requiredPermissions,
    this.requiresSetup = false,
  });
  
  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á RouteInfo ‡∏à‡∏≤‡∏Å route path
  factory RouteInfo.fromRoute(String route) {
    return RouteInfo(
      path: route,
      name: AppRoutes._getRouteName(route),
      requiresSetup: AppRoutes.requiresSetup(route),
      requiredPermissions: AppRoutes.requiresPermissions(route) 
          ? ['notifications', 'alarms'] 
          : null,
    );
  }
  
  @override
  String toString() {
    return 'RouteInfo(path: $path, name: $name, isActive: $isActive)';
  }
}

/// üîÑ Route Transitions
enum RouteTransition {
  fade,
  slide,
  scale,
  rotation,
  cupertino,
  material,
  none,
}

/// üéØ Route Metadata
class RouteMetadata {
  /// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î transition ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ route
  static const Map<String, RouteTransition> transitions = {
    AppRoutes.splash: RouteTransition.fade,
    AppRoutes.questionnaire: RouteTransition.slide,
    AppRoutes.home: RouteTransition.fade,
    AppRoutes.todo: RouteTransition.slide,
    AppRoutes.settings: RouteTransition.slide,
    AppRoutes.statistics: RouteTransition.slide,
  };
  
  /// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ transition
  static const Map<String, Duration> transitionDurations = {
    AppRoutes.splash: Duration(milliseconds: 500),
    AppRoutes.questionnaire: Duration(milliseconds: 300),
    AppRoutes.home: Duration(milliseconds: 400),
    AppRoutes.todo: Duration(milliseconds: 300),
    AppRoutes.settings: Duration(milliseconds: 300),
    AppRoutes.statistics: Duration(milliseconds: 300),
  };
  
  /// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ route
  static const Map<String, List<String>> middlewares = {
    AppRoutes.home: ['setup_check', 'permission_check'],
    AppRoutes.todo: ['setup_check', 'permission_check'],
    AppRoutes.statistics: ['setup_check'],
  };
  
  /// ‡∏£‡∏±‡∏ö transition ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö route
  static RouteTransition getTransition(String route) {
    return transitions[route] ?? RouteTransition.cupertino;
  }
  
  /// ‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ transition ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö route
  static Duration getTransitionDuration(String route) {
    return transitionDurations[route] ?? const Duration(milliseconds: 300);
  }
  
  /// ‡∏£‡∏±‡∏ö middlewares ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö route
  static List<String> getMiddlewares(String route) {
    return middlewares[route] ?? [];
  }
}