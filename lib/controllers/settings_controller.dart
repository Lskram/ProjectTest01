import 'package:get/get.dart';
import 'package:flutter/foundation.dart';
import '../models/user_settings.dart';
import '../services/database_service.dart';
import '../services/notification_service.dart';

class SettingsController extends GetxController {
  static SettingsController get instance => Get.find();

  // Reactive variables
  final _settings = Rxn<UserSettings>();
  final _isLoading = false.obs;

  // Getters
  UserSettings get settings => _settings.value ?? UserSettings();
  bool get isLoading => _isLoading.value;

  // Individual setting getters
  bool get notificationsEnabled => settings.notificationsEnabled;
  int get intervalMinutes => settings.intervalMinutes;
  TimeOfDay get workStartTime => settings.workStartTime;
  TimeOfDay get workEndTime => settings.workEndTime;
  List<int> get workDays => settings.workDays;
  List<BreakPeriod> get breakPeriods => settings.breakPeriods;
  bool get soundEnabled => settings.soundEnabled;
  bool get vibrationEnabled => settings.vibrationEnabled;
  int get maxSnoozeCount => settings.maxSnoozeCount;
  List<int> get snoozeOptions => settings.snoozeOptions;
  List<int> get selectedPainPointIds => settings.selectedPainPointIds;

  @override
  void onInit() {
    super.onInit();
    loadSettings();
  }

  /// Load settings from database
  Future<void> loadSettings() async {
    try {
      _isLoading.value = true;
      final loadedSettings = DatabaseService.instance.getUserSettings();
      _settings.value = loadedSettings;
    } catch (e) {
      debugPrint('‚ùå Load settings error: $e');
    } finally {
      _isLoading.value = false;
    }
  }

  /// Save settings to database
  Future<void> _saveSettings() async {
    try {
      await DatabaseService.instance.saveUserSettings(settings);
      debugPrint('‚úÖ Settings saved');
    } catch (e) {
      debugPrint('‚ùå Save settings error: $e');
      Get.snackbar('Error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: $e');
    }
  }

  /// Update notifications enabled
  Future<void> updateNotificationsEnabled(bool enabled) async {
    final updatedSettings = settings.copyWith(notificationsEnabled: enabled);
    _settings.value = updatedSettings;
    await _saveSettings();

    // Update notification system - ‡πÉ‡∏ä‡πâ service ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÅ‡∏ó‡∏ô controller
    if (enabled) {
      await NotificationService.instance.scheduleNextNotification();
      Get.snackbar('‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô üîî', '‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢');
    } else {
      await NotificationService.instance.cancelAllNotifications();
      Get.snackbar('‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô üîï', '‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß');
    }
  }

  /// Update interval minutes
  Future<void> updateIntervalMinutes(int minutes) async {
    if (minutes < 15 || minutes > 240) {
      Get.snackbar('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 15-240 ‡∏ô‡∏≤‡∏ó‡∏µ');
      return;
    }

    final updatedSettings = settings.copyWith(intervalMinutes: minutes);
    _settings.value = updatedSettings;
    await _saveSettings();

    // Reschedule notifications
    if (notificationsEnabled) {
      await NotificationService.instance.scheduleNextNotification();
    }

    Get.snackbar('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß', '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô $minutes ‡∏ô‡∏≤‡∏ó‡∏µ');
  }

  /// Update work time
  Future<void> updateWorkTime({
    TimeOfDay? startTime,
    TimeOfDay? endTime,
  }) async {
    final updatedSettings = settings.copyWith(
      workStartTime: startTime,
      workEndTime: endTime,
    );
    _settings.value = updatedSettings;
    await _saveSettings();

    // Reschedule notifications
    if (notificationsEnabled) {
      await NotificationService.instance.scheduleNextNotification();
    }

    Get.snackbar('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß', '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß');
  }

  /// Update work days
  Future<void> updateWorkDays(List<int> days) async {
    final updatedSettings = settings.copyWith(workDays: days);
    _settings.value = updatedSettings;
    await _saveSettings();

    // Reschedule notifications
    if (notificationsEnabled) {
      await NotificationService.instance.scheduleNextNotification();
    }

    final dayNames = days.map(_getDayName).join(', ');
    Get.snackbar('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß', '‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: $dayNames');
  }

  /// Add break period
  Future<void> addBreakPeriod(BreakPeriod breakPeriod) async {
    final currentBreaks = List<BreakPeriod>.from(breakPeriods);
    currentBreaks.add(breakPeriod);

    final updatedSettings = settings.copyWith(breakPeriods: currentBreaks);
    _settings.value = updatedSettings;
    await _saveSettings();

    // Reschedule notifications
    if (notificationsEnabled) {
      await NotificationService.instance.scheduleNextNotification();
    }

    Get.snackbar('‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß', '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å: ${breakPeriod.name}');
  }

  /// Remove break period
  Future<void> removeBreakPeriod(int index) async {
    final currentBreaks = List<BreakPeriod>.from(breakPeriods);
    if (index >= 0 && index < currentBreaks.length) {
      final removed = currentBreaks.removeAt(index);

      final updatedSettings = settings.copyWith(breakPeriods: currentBreaks);
      _settings.value = updatedSettings;
      await _saveSettings();

      // Reschedule notifications
      if (notificationsEnabled) {
        await NotificationService.instance.scheduleNextNotification();
      }

      Get.snackbar('‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß', '‡∏•‡∏ö‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å: ${removed.name}');
    }
  }

  /// Update sound enabled
  Future<void> updateSoundEnabled(bool enabled) async {
    final updatedSettings = settings.copyWith(soundEnabled: enabled);
    _settings.value = updatedSettings;
    await _saveSettings();

    Get.snackbar(enabled ? '‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á' : '‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á',
        '‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô${enabled ? "‡πÄ‡∏õ‡∏¥‡∏î" : "‡∏õ‡∏¥‡∏î"}‡πÅ‡∏•‡πâ‡∏ß');
  }

  /// Update vibration enabled
  Future<void> updateVibrationEnabled(bool enabled) async {
    final updatedSettings = settings.copyWith(vibrationEnabled: enabled);
    _settings.value = updatedSettings;
    await _saveSettings();

    Get.snackbar(enabled ? '‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏ô' : '‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏ô',
        '‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô${enabled ? "‡πÄ‡∏õ‡∏¥‡∏î" : "‡∏õ‡∏¥‡∏î"}‡πÅ‡∏•‡πâ‡∏ß');
  }

  /// Update max snooze count
  Future<void> updateMaxSnoozeCount(int count) async {
    if (count < 0 || count > 10) {
      Get.snackbar('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô 0-10 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
      return;
    }

    final updatedSettings = settings.copyWith(maxSnoozeCount: count);
    _settings.value = updatedSettings;
    await _saveSettings();

    Get.snackbar('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß', '‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î $count ‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
  }

  /// Update snooze options
  Future<void> updateSnoozeOptions(List<int> options) async {
    final validOptions = options.where((o) => o > 0 && o <= 60).toList();

    final updatedSettings = settings.copyWith(snoozeOptions: validOptions);
    _settings.value = updatedSettings;
    await _saveSettings();

    Get.snackbar(
        '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß', '‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô: ${validOptions.join(", ")} ‡∏ô‡∏≤‡∏ó‡∏µ');
  }

  /// Reset settings to default
  Future<void> resetToDefault() async {
    final defaultSettings = UserSettings();
    _settings.value = defaultSettings;
    await _saveSettings();

    Get.snackbar('‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÅ‡∏•‡πâ‡∏ß', '‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô');
  }

  /// Get day name in Thai
  String _getDayName(int day) {
    const dayNames = {
      1: '‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå',
      2: '‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£',
      3: '‡∏û‡∏∏‡∏ò',
      4: '‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ',
      5: '‡∏®‡∏∏‡∏Å‡∏£‡πå',
      6: '‡πÄ‡∏™‡∏≤‡∏£‡πå',
      7: '‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå',
    };
    return dayNames[day] ?? '';
  }

  /// Get interval options for UI
  List<int> get intervalOptions => [15, 30, 45, 60, 90, 120, 180, 240];

  /// Get work day options for UI
  Map<int, String> get workDayOptions => {
        1: '‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå',
        2: '‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£',
        3: '‡∏û‡∏∏‡∏ò',
        4: '‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ',
        5: '‡∏®‡∏∏‡∏Å‡∏£‡πå',
        6: '‡πÄ‡∏™‡∏≤‡∏£‡πå',
        7: '‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå',
      };

  /// Validate work time
  bool isValidWorkTime(TimeOfDay start, TimeOfDay end) {
    final startMinutes = start.hour * 60 + start.minute;
    final endMinutes = end.hour * 60 + end.minute;
    return endMinutes > startMinutes;
  }
}
