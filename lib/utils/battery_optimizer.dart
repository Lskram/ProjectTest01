// lib/utils/battery_optimizer.dart
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:device_info_plus/device_info_plus.dart';

/// üîã Office Syndrome Helper - Battery Optimization Guidance
/// ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏õ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á

class BatteryOptimizer {
  static const String _channelName = 'office_syndrome_helper/battery';
  static const MethodChannel _channel = MethodChannel(_channelName);

  /// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå
  static const Map<String, BatteryOptimizationGuide> _brandGuides = {
    'samsung': BatteryOptimizationGuide(
      brandName: 'Samsung',
      steps: [
        '‡πÄ‡∏õ‡∏¥‡∏î Settings ‚Üí Device care ‚Üí Battery',
        '‡πÅ‡∏ï‡∏∞ "App power management"',
        '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "Apps that won\'t be put to sleep"',
        '‡πÄ‡∏û‡∏¥‡πà‡∏° "Office Syndrome Helper"',
        '‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Battery ‚Üí More battery settings',
        '‡∏õ‡∏¥‡∏î "Adaptive battery" ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏≠‡∏õ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô',
      ],
      additionalTips: [
        '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ "Auto-launch" ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ô Smart Manager',
        '‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏≠‡∏õ‡πÉ‡∏ô "Protected apps" ‡πÉ‡∏ô Device care',
      ],
    ),
    'huawei': BatteryOptimizationGuide(
      brandName: 'Huawei',
      steps: [
        '‡πÄ‡∏õ‡∏¥‡∏î Settings ‚Üí Apps ‚Üí Office Syndrome Helper',
        '‡πÅ‡∏ï‡∏∞ "Battery" ‚Üí "App launch"',
        '‡πÄ‡∏õ‡∏¥‡∏î "Manage manually"',
        '‡πÄ‡∏õ‡∏¥‡∏î "Auto-launch", "Secondary launch", "Run in background"',
        '‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ Settings ‚Üí Battery ‚Üí More battery settings',
        '‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏≠‡∏õ‡πÉ‡∏ô "Protected apps"',
      ],
      additionalTips: [
        '‡∏õ‡∏¥‡∏î PowerGenie ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏≠‡∏õ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô',
        '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Phone Manager ‚Üí Protected apps',
      ],
    ),
    'xiaomi': BatteryOptimizationGuide(
      brandName: 'Xiaomi / Redmi',
      steps: [
        '‡πÄ‡∏õ‡∏¥‡∏î Settings ‚Üí Apps ‚Üí Manage apps',
        '‡∏´‡∏≤ "Office Syndrome Helper" ‚Üí ‡πÅ‡∏ï‡∏∞',
        '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "Battery saver" ‚Üí "No restrictions"',
        '‡πÄ‡∏õ‡∏¥‡∏î "Autostart"',
        '‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ Settings ‚Üí Battery & performance',
        '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "Choose apps" ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏≠‡∏õ',
      ],
      additionalTips: [
        '‡∏õ‡∏¥‡∏î MIUI Optimization ‡πÉ‡∏ô Developer options',
        '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Security ‚Üí Autostart ‚Üí ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ',
        '‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô Memory & storage cleanup whitelist',
      ],
    ),
    'oppo': BatteryOptimizationGuide(
      brandName: 'OPPO',
      steps: [
        '‡πÄ‡∏õ‡∏¥‡∏î Settings ‚Üí Battery ‚Üí Power saving mode',
        '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "Custom" ‚Üí "Background app management"',
        '‡∏´‡∏≤ "Office Syndrome Helper" ‚Üí ‡πÄ‡∏õ‡∏¥‡∏î "Allow background activity"',
        '‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ Settings ‚Üí Apps & notifications',
        '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "Office Syndrome Helper" ‚Üí "Battery usage"',
        '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "Don\'t optimize"',
      ],
      additionalTips: [
        '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Startup manager ‡πÉ‡∏´‡πâ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÅ‡∏≠‡∏õ',
        '‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô Phone Manager whitelist',
      ],
    ),
    'vivo': BatteryOptimizationGuide(
      brandName: 'Vivo',
      steps: [
        '‡πÄ‡∏õ‡∏¥‡∏î Settings ‚Üí Battery ‚Üí Background app refresh',
        '‡∏´‡∏≤ "Office Syndrome Helper" ‚Üí ‡πÄ‡∏õ‡∏¥‡∏î',
        '‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ Settings ‚Üí More settings ‚Üí Applications',
        '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "Autostart" ‚Üí ‡πÄ‡∏õ‡∏¥‡∏î "Office Syndrome Helper"',
        '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "High background power consumption" ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏≠‡∏õ',
      ],
      additionalTips: [
        '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ iManager ‚Üí App manager ‚Üí Autostart management',
        '‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô Whitelist ‡∏Ç‡∏≠‡∏á Smart power',
      ],
    ),
    'oneplus': BatteryOptimizationGuide(
      brandName: 'OnePlus',
      steps: [
        '‡πÄ‡∏õ‡∏¥‡∏î Settings ‚Üí Battery ‚Üí Battery optimization',
        '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "All apps" ‚Üí ‡∏´‡∏≤ "Office Syndrome Helper"',
        '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "Don\'t optimize"',
        '‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ Settings ‚Üí Apps & notifications',
        '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "Office Syndrome Helper" ‚Üí "Advanced" ‚Üí "Battery"',
        '‡πÄ‡∏õ‡∏¥‡∏î "Background activity"',
      ],
      additionalTips: [
        '‡∏õ‡∏¥‡∏î Adaptive Battery ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏≠‡∏õ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô',
        '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Recent apps lock',
      ],
    ),
  };

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
  static Future<DeviceInfo> getDeviceInfo() async {
    final deviceInfo = DeviceInfoPlugin();

    if (Platform.isAndroid) {
      final androidInfo = await deviceInfo.androidInfo;
      return DeviceInfo(
        brand: androidInfo.brand.toLowerCase(),
        model: androidInfo.model,
        manufacturer: androidInfo.manufacturer.toLowerCase(),
        androidVersion: androidInfo.version.release,
        apiLevel: androidInfo.version.sdkInt,
      );
    } else if (Platform.isIOS) {
      final iosInfo = await deviceInfo.iosInfo;
      return DeviceInfo(
        brand: 'apple',
        model: iosInfo.model,
        manufacturer: 'apple',
        androidVersion: iosInfo.systemVersion,
        apiLevel: 0,
      );
    }

    return DeviceInfo(
      brand: 'unknown',
      model: 'unknown',
      manufacturer: 'unknown',
      androidVersion: 'unknown',
      apiLevel: 0,
    );
  }

  /// ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠
  static Future<BatteryOptimizationGuide> getBatteryGuide() async {
    try {
      final deviceInfo = await getDeviceInfo();
      final brand = deviceInfo.manufacturer.toLowerCase();

      // ‡∏´‡∏≤‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏≤‡∏°‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠
      BatteryOptimizationGuide? guide = _brandGuides[brand];

      // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠ ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏à‡∏≤‡∏Å brand name
      if (guide == null) {
        for (final entry in _brandGuides.entries) {
          if (brand.contains(entry.key) ||
              deviceInfo.brand.contains(entry.key)) {
            guide = entry.value;
            break;
          }
        }
      }

      // ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
      guide ??= _getGenericGuide(deviceInfo);

      return guide.copyWith(
        deviceModel: deviceInfo.model,
        androidVersion: deviceInfo.androidVersion,
      );
    } catch (e) {
      debugPrint('‚ùå Error getting battery guide: $e');
      return _getGenericGuide(null);
    }
  }

  /// ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Android
  static BatteryOptimizationGuide _getGenericGuide(DeviceInfo? deviceInfo) {
    return BatteryOptimizationGuide(
      brandName: deviceInfo?.manufacturer ?? 'Android',
      steps: [
        '‡πÄ‡∏õ‡∏¥‡∏î Settings ‚Üí Apps & notifications',
        '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "Office Syndrome Helper"',
        '‡πÅ‡∏ï‡∏∞ "Battery" ‚Üí "Battery optimization"',
        '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "All apps" ‚Üí ‡∏´‡∏≤ "Office Syndrome Helper"',
        '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "Don\'t optimize"',
        '‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ App settings ‚Üí "Permissions"',
        '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ permissions ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô',
      ],
      additionalTips: [
        '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Do Not Disturb ‡πÉ‡∏´‡πâ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡πÅ‡∏≠‡∏õ',
        '‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏≠‡∏õ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥',
        '‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏´‡∏•‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß',
      ],
      deviceModel: deviceInfo?.model,
      androidVersion: deviceInfo?.androidVersion,
    );
  }

  /// ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà
  static Future<bool> openBatterySettings() async {
    try {
      if (Platform.isAndroid) {
        final result = await _channel.invokeMethod('openBatteryOptimization');
        return result == true;
      }
      return false;
    } catch (e) {
      debugPrint('‚ùå Error opening battery settings: $e');
      return false;
    }
  }

  /// ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏≠‡∏õ
  static Future<bool> openAppSettings() async {
    try {
      if (Platform.isAndroid) {
        final result = await _channel.invokeMethod('openAppSettings');
        return result == true;
      }
      return false;
    } catch (e) {
      debugPrint('‚ùå Error opening app settings: $e');
      return false;
    }
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Battery Optimization
  static Future<bool> isBatteryOptimizationIgnored() async {
    try {
      if (Platform.isAndroid) {
        final result =
            await _channel.invokeMethod('isBatteryOptimizationIgnored');
        return result == true;
      }
      return true; // iOS ‡πÑ‡∏°‡πà‡∏°‡∏µ battery optimization
    } catch (e) {
      debugPrint('‚ùå Error checking battery optimization: $e');
      return false;
    }
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÅ‡∏≠‡∏õ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  static Future<BackgroundStatus> checkBackgroundStatus() async {
    try {
      final deviceInfo = await getDeviceInfo();
      final isBatteryOptimized = !(await isBatteryOptimizationIgnored());

      return BackgroundStatus(
        canRunInBackground: !isBatteryOptimized,
        batteryOptimizationEnabled: isBatteryOptimized,
        deviceBrand: deviceInfo.manufacturer,
        recommendations:
            await _getRecommendations(deviceInfo, isBatteryOptimized),
      );
    } catch (e) {
      debugPrint('‚ùå Error checking background status: $e');
      return BackgroundStatus(
        canRunInBackground: false,
        batteryOptimizationEnabled: true,
        deviceBrand: 'unknown',
        recommendations: [],
      );
    }
  }

  /// ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
  static Future<List<String>> _getRecommendations(
      DeviceInfo deviceInfo, bool isBatteryOptimized) async {
    final recommendations = <String>[];

    if (isBatteryOptimized) {
      recommendations.addAll([
        '‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏õ‡∏ô‡∏µ‡πâ',
        '‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏õ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á',
        '‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏≠‡∏õ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏≠‡∏õ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô',
      ]);
    }

    if (deviceInfo.apiLevel >= 23) {
      recommendations.add('‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Doze mode');
    }

    if (deviceInfo.apiLevel >= 28) {
      recommendations.add('‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Adaptive Battery ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°');
    }

    // ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏≤‡∏°‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠
    final brand = deviceInfo.manufacturer.toLowerCase();
    if (brand.contains('samsung')) {
      recommendations.addAll([
        '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Device care ‚Üí Battery ‚Üí Apps ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ô‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏ö',
        '‡∏õ‡∏¥‡∏î Adaptive battery ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏≠‡∏õ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô',
      ]);
    } else if (brand.contains('huawei')) {
      recommendations.addAll([
        '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Protected apps ‡πÉ‡∏ô Phone Manager',
        '‡πÄ‡∏õ‡∏¥‡∏î Manual management ‡πÉ‡∏ô App launch',
      ]);
    } else if (brand.contains('xiaomi')) {
      recommendations.addAll([
        '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Autostart ‡πÅ‡∏•‡∏∞ Background restrictions',
        '‡∏õ‡∏¥‡∏î MIUI Optimization',
      ]);
    }

    return recommendations;
  }

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á Widget ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
  static Widget buildOptimizationGuide(
      BuildContext context, BatteryOptimizationGuide guide) {
    return Card(
      margin: const EdgeInsets.all(16),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(
                  Icons.battery_saver,
                  color: Theme.of(context).primaryColor,
                  size: 28,
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: Text(
                    '‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${guide.brandName}',
                    style: Theme.of(context).textTheme.titleLarge?.copyWith(
                          fontWeight: FontWeight.bold,
                        ),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            if (guide.deviceModel != null) ...[
              Text(
                '‡∏£‡∏∏‡πà‡∏ô: ${guide.deviceModel}',
                style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                      color: Colors.grey[600],
                    ),
              ),
              const SizedBox(height: 8),
            ],
            Text(
              '‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤:',
              style: Theme.of(context).textTheme.titleMedium?.copyWith(
                    fontWeight: FontWeight.w600,
                  ),
            ),
            const SizedBox(height: 8),
            ...guide.steps.asMap().entries.map((entry) {
              final index = entry.key + 1;
              final step = entry.value;
              return Padding(
                padding: const EdgeInsets.only(bottom: 8),
                child: Row(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Container(
                      width: 24,
                      height: 24,
                      decoration: BoxDecoration(
                        color: Theme.of(context).primaryColor,
                        borderRadius: BorderRadius.circular(12),
                      ),
                      child: Center(
                        child: Text(
                          '$index',
                          style: const TextStyle(
                            color: Colors.white,
                            fontSize: 12,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                    ),
                    const SizedBox(width: 12),
                    Expanded(
                      child: Text(
                        step,
                        style: Theme.of(context).textTheme.bodyMedium,
                      ),
                    ),
                  ],
                ),
              );
            }),
            if (guide.additionalTips.isNotEmpty) ...[
              const SizedBox(height: 16),
              Text(
                '‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:',
                style: Theme.of(context).textTheme.titleMedium?.copyWith(
                      fontWeight: FontWeight.w600,
                    ),
              ),
              const SizedBox(height: 8),
              ...guide.additionalTips.map((tip) => Padding(
                    padding: const EdgeInsets.only(bottom: 4),
                    child: Row(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Text('‚Ä¢ ', style: TextStyle(fontSize: 16)),
                        Expanded(
                          child: Text(
                            tip,
                            style: Theme.of(context).textTheme.bodyMedium,
                          ),
                        ),
                      ],
                    ),
                  )),
            ],
            const SizedBox(height: 20),
            Row(
              children: [
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: () => openBatterySettings(),
                    icon: const Icon(Icons.settings),
                    label: const Text('‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤'),
                  ),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: OutlinedButton.icon(
                    onPressed: () => openAppSettings(),
                    icon: const Icon(Icons.apps),
                    label: const Text('‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏≠‡∏õ'),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á Widget ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
  static Widget buildBackgroundStatusCard(
      BuildContext context, BackgroundStatus status) {
    final statusColor =
        status.canRunInBackground ? Colors.green : Colors.orange;
    final statusIcon =
        status.canRunInBackground ? Icons.check_circle : Icons.warning;
    final statusText = status.canRunInBackground
        ? '‡πÅ‡∏≠‡∏õ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ'
        : '‡πÅ‡∏≠‡∏õ‡∏≠‡∏≤‡∏à‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á';

    return Card(
      margin: const EdgeInsets.all(16),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(
                  statusIcon,
                  color: statusColor,
                  size: 28,
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: Text(
                    '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô',
                    style: Theme.of(context).textTheme.titleLarge?.copyWith(
                          fontWeight: FontWeight.bold,
                        ),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 12),
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: statusColor.withOpacity(0.1),
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: statusColor.withOpacity(0.3)),
              ),
              child: Row(
                children: [
                  Icon(statusIcon, color: statusColor, size: 20),
                  const SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      statusText,
                      style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                            color: statusColor,
                            fontWeight: FontWeight.w500,
                          ),
                    ),
                  ),
                ],
              ),
            ),
            if (status.recommendations.isNotEmpty) ...[
              const SizedBox(height: 16),
              Text(
                '‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:',
                style: Theme.of(context).textTheme.titleMedium?.copyWith(
                      fontWeight: FontWeight.w600,
                    ),
              ),
              const SizedBox(height: 8),
              ...status.recommendations.map((recommendation) => Padding(
                    padding: const EdgeInsets.only(bottom: 4),
                    child: Row(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Icon(
                          Icons.lightbulb_outline,
                          size: 16,
                          color: Theme.of(context).primaryColor,
                        ),
                        const SizedBox(width: 8),
                        Expanded(
                          child: Text(
                            recommendation,
                            style: Theme.of(context).textTheme.bodyMedium,
                          ),
                        ),
                      ],
                    ),
                  )),
            ],
          ],
        ),
      ),
    );
  }

  /// ‡πÅ‡∏™‡∏î‡∏á Dialog ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà
  static Future<void> showBatteryOptimizationDialog(
      BuildContext context) async {
    final guide = await getBatteryGuide();

    if (!context.mounted) return;

    showDialog(
      context: context,
      builder: (context) => Dialog(
        child: Container(
          constraints: const BoxConstraints(maxHeight: 600),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              AppBar(
                title: const Text('‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà'),
                automaticallyImplyLeading: false,
                actions: [
                  IconButton(
                    onPressed: () => Navigator.of(context).pop(),
                    icon: const Icon(Icons.close),
                  ),
                ],
              ),
              Flexible(
                child: SingleChildScrollView(
                  child: buildOptimizationGuide(context, guide),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏≤‡∏Å‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
  static Future<void> checkAndShowWarningIfNeeded(BuildContext context) async {
    final status = await checkBackgroundStatus();

    if (!status.canRunInBackground && context.mounted) {
      showDialog(
        context: context,
        builder: (context) => AlertDialog(
          title: const Row(
            children: [
              Icon(Icons.warning, color: Colors.orange),
              SizedBox(width: 8),
              Text('‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç'),
            ],
          ),
          content: const Text(
            '‡πÅ‡∏≠‡∏õ‡∏≠‡∏≤‡∏à‡∏´‡∏¢‡∏∏‡∏î‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á '
            '‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà\n\n'
            '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: const Text('‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ'),
            ),
            ElevatedButton(
              onPressed: () {
                Navigator.of(context).pop();
                showBatteryOptimizationDialog(context);
              },
              child: const Text('‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç'),
            ),
          ],
        ),
      );
    }
  }
}

/// ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
class DeviceInfo {
  final String brand;
  final String model;
  final String manufacturer;
  final String androidVersion;
  final int apiLevel;

  const DeviceInfo({
    required this.brand,
    required this.model,
    required this.manufacturer,
    required this.androidVersion,
    required this.apiLevel,
  });
}

/// ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà
class BatteryOptimizationGuide {
  final String brandName;
  final List<String> steps;
  final List<String> additionalTips;
  final String? deviceModel;
  final String? androidVersion;

  const BatteryOptimizationGuide({
    required this.brandName,
    required this.steps,
    required this.additionalTips,
    this.deviceModel,
    this.androidVersion,
  });

  BatteryOptimizationGuide copyWith({
    String? brandName,
    List<String>? steps,
    List<String>? additionalTips,
    String? deviceModel,
    String? androidVersion,
  }) {
    return BatteryOptimizationGuide(
      brandName: brandName ?? this.brandName,
      steps: steps ?? this.steps,
      additionalTips: additionalTips ?? this.additionalTips,
      deviceModel: deviceModel ?? this.deviceModel,
      androidVersion: androidVersion ?? this.androidVersion,
    );
  }
}

/// ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
class BackgroundStatus {
  final bool canRunInBackground;
  final bool batteryOptimizationEnabled;
  final String deviceBrand;
  final List<String> recommendations;

  const BackgroundStatus({
    required this.canRunInBackground,
    required this.batteryOptimizationEnabled,
    required this.deviceBrand,
    required this.recommendations,
  });
}

/// Tips ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
class BatteryTips {
  static const List<String> generalTips = [
    'üîã ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÅ‡∏≠‡∏õ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á',
    '‚ö° ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏õ‡∏ô‡∏µ‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞',
    'üì± ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏≠‡∏õ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥',
    'üîÑ ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß',
    '‚è∞ ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
    'üéØ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏õ‡∏ß‡∏î‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£',
  ];

  static const List<String> advancedTips = [
    'üîß ‡πÄ‡∏õ‡∏¥‡∏î Developer Options ‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î "Don\'t keep activities"',
    'üíæ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Storage space ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠',
    'üì° ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£',
    'üé® ‡πÉ‡∏ä‡πâ Dark mode ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà',
    'üîá ‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°',
  ];

  /// ‡∏£‡∏±‡∏ö tips ‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  static List<String> getTipsForUser({bool isAdvancedUser = false}) {
    if (isAdvancedUser) {
      return [...generalTips, ...advancedTips];
    }
    return generalTips;
  }

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á Widget ‡πÅ‡∏™‡∏î‡∏á Tips
  static Widget buildTipsCard(BuildContext context,
      {bool isAdvancedUser = false}) {
    final tips = getTipsForUser(isAdvancedUser: isAdvancedUser);

    return Card(
      margin: const EdgeInsets.all(16),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(
                  Icons.tips_and_updates,
                  color: Theme.of(context).primaryColor,
                  size: 24,
                ),
                const SizedBox(width: 8),
                Text(
                  '‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
                  style: Theme.of(context).textTheme.titleLarge?.copyWith(
                        fontWeight: FontWeight.bold,
                      ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            ...tips.map((tip) => Padding(
                  padding: const EdgeInsets.only(bottom: 8),
                  child: Text(
                    tip,
                    style: Theme.of(context).textTheme.bodyMedium,
                  ),
                )),
          ],
        ),
      ),
    );
  }
}
