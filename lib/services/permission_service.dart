import 'package:permission_handler/permission_handler.dart';
import 'package:flutter/material.dart';
import 'package:flutter/foundation.dart';
import 'package:get/get.dart';
import '../models/user_settings.dart';
import 'database_service.dart';

class PermissionService {
  static PermissionService? _instance;
  static PermissionService get instance => _instance ??= PermissionService._();
  PermissionService._();

  /// Main permission flow with hasRequestedPermissions check
  Future<bool> requestPermissions() async {
    try {
      final settings = await DatabaseService.instance.loadSettings();

      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      if (settings.hasRequestedPermissions) {
        debugPrint(
            'üîê Permissions already requested, checking current status...');
        return await checkCurrentPermissionStatus();
      }

      // ‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏¥‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
      debugPrint('üîê Requesting permissions for first time...');
      final result = await _requestAllPermissions();

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß
      final updatedSettings = settings.copyWith(hasRequestedPermissions: true);
      await DatabaseService.instance.saveSettings(updatedSettings);

      return result;
    } catch (e) {
      debugPrint('‚ùå Error in requestPermissions: $e');
      return false;
    }
  }

  /// Check current permission status without requesting
  Future<bool> checkCurrentPermissionStatus() async {
    try {
      final permissions = [
        Permission.notification,
        if (GetPlatform.isAndroid) Permission.scheduleExactAlarm,
      ];

      for (final permission in permissions) {
        final status = await permission.status;
        debugPrint(
            'üîç Permission ${permission.toString()}: ${status.toString()}');

        if (!status.isGranted) {
          // Show dialog for permanently denied permissions
          if (status.isPermanentlyDenied) {
            await _showPermanentlyDeniedDialog(permission);
          }
          return false;
        }
      }

      debugPrint('‚úÖ All permissions granted');
      return true;
    } catch (e) {
      debugPrint('‚ùå Error checking permissions: $e');
      return false;
    }
  }

  /// Request all required permissions
  Future<bool> _requestAllPermissions() async {
    try {
      // Step 1: Notification permission
      final notificationGranted = await _requestNotificationPermission();
      if (!notificationGranted) {
        debugPrint('‚ùå Notification permission denied');
        return false;
      }

      // Step 2: Exact alarm permission (Android 12+)
      if (GetPlatform.isAndroid) {
        final alarmGranted = await _requestExactAlarmPermission();
        if (!alarmGranted) {
          debugPrint('‚ùå Exact alarm permission denied');
          return false;
        }
      }

      debugPrint('‚úÖ All permissions granted successfully');
      return true;
    } catch (e) {
      debugPrint('‚ùå Error requesting permissions: $e');
      return false;
    }
  }

  /// Request notification permission with explanation
  Future<bool> _requestNotificationPermission() async {
    try {
      final status = await Permission.notification.status;

      if (status.isGranted) {
        return true;
      }

      if (status.isDenied) {
        // Show explanation dialog first
        final shouldRequest = await _showPermissionExplanationDialog(
          '‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô',
          '‡πÅ‡∏≠‡∏õ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏¥‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î',
        );

        if (!shouldRequest) return false;

        final result = await Permission.notification.request();
        return result.isGranted;
      }

      if (status.isPermanentlyDenied) {
        await _showPermanentlyDeniedDialog(Permission.notification);
        return false;
      }

      return false;
    } catch (e) {
      debugPrint('‚ùå Error requesting notification permission: $e');
      return false;
    }
  }

  /// Request exact alarm permission
  Future<bool> _requestExactAlarmPermission() async {
    try {
      if (!GetPlatform.isAndroid) return true;

      final status = await Permission.scheduleExactAlarm.status;

      if (status.isGranted) {
        return true;
      }

      if (status.isDenied) {
        // Show explanation dialog
        final shouldRequest = await _showPermissionExplanationDialog(
          '‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥',
          '‡πÅ‡∏≠‡∏õ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏¥‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏°‡πâ‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà',
        );

        if (!shouldRequest) return false;

        final result = await Permission.scheduleExactAlarm.request();
        return result.isGranted;
      }

      if (status.isPermanentlyDenied) {
        await _showPermanentlyDeniedDialog(Permission.scheduleExactAlarm);
        return false;
      }

      return false;
    } catch (e) {
      debugPrint('‚ùå Error requesting exact alarm permission: $e');
      return false;
    }
  }

  /// Show explanation dialog before requesting permission
  Future<bool> _showPermissionExplanationDialog(
      String permissionName, String reason) async {
    return await Get.dialog<bool>(
          AlertDialog(
            title: Text('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏¥$permissionName'),
            content: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(reason),
                const SizedBox(height: 16),
                const Text(
                  '‡πÅ‡∏≠‡∏õ‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÉ‡∏î‡πÜ ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö offline ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô',
                  style: TextStyle(fontSize: 12, color: Colors.grey),
                ),
              ],
            ),
            actions: [
              TextButton(
                onPressed: () => Get.back(result: false),
                child: const Text('‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï'),
              ),
              ElevatedButton(
                onPressed: () => Get.back(result: true),
                child: const Text('‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï'),
              ),
            ],
          ),
          barrierDismissible: false,
        ) ??
        false;
  }

  /// Show dialog for permanently denied permissions
  Future<void> _showPermanentlyDeniedDialog(Permission permission) async {
    String permissionName;
    String description;

    switch (permission) {
      case Permission.notification:
        permissionName = '‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô';
        description = '‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏õ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÑ‡∏î‡πâ';
        break;
      case Permission.scheduleExactAlarm:
        permissionName = '‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥';
        description =
            '‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÅ‡∏°‡πâ‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà';
        break;
      default:
        permissionName = '‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô';
        description = '‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏õ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
    }

    await Get.dialog(
      AlertDialog(
        title: Text('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏¥$permissionName'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(description),
            const SizedBox(height: 16),
            const Text(
              '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏≠‡∏õ > ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
              style: TextStyle(fontWeight: FontWeight.w500),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Get.back(),
            child: const Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'),
          ),
          ElevatedButton(
            onPressed: () {
              Get.back();
              openAppSettings();
            },
            child: const Text('‡πÑ‡∏õ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤'),
          ),
        ],
      ),
      barrierDismissible: false,
    );
  }

  /// Quick check methods
  Future<bool> isNotificationPermissionGranted() async {
    return await Permission.notification.isGranted;
  }

  Future<bool> isExactAlarmPermissionGranted() async {
    if (!GetPlatform.isAndroid) return true;
    return await Permission.scheduleExactAlarm.isGranted;
  }

  /// Get all permission statuses
  Future<Map<String, bool>> getAllPermissionStatuses() async {
    return {
      'notification': await isNotificationPermissionGranted(),
      'exactAlarm': await isExactAlarmPermissionGranted(),
    };
  }

  /// Check if all critical permissions are granted
  Future<bool> areAllCriticalPermissionsGranted() async {
    final statuses = await getAllPermissionStatuses();
    return statuses.values.every((granted) => granted);
  }

  /// Reset permission request flag (for testing)
  Future<void> resetPermissionRequestFlag() async {
    final settings = await DatabaseService.instance.loadSettings();
    final updatedSettings = settings.copyWith(hasRequestedPermissions: false);
    await DatabaseService.instance.saveSettings(updatedSettings);
    debugPrint('üîÑ Permission request flag reset');
  }

  /// Test notification permission (for development)
  Future<void> testNotificationPermission() async {
    try {
      final status = await Permission.notification.status;
      debugPrint('üß™ Notification permission status: ${status.toString()}');

      if (status.isGranted) {
        debugPrint('‚úÖ Notification permission is granted');
      } else {
        debugPrint('‚ùå Notification permission is not granted');
      }
    } catch (e) {
      debugPrint('‚ùå Error testing notification permission: $e');
    }
  }
}
