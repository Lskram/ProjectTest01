import 'package:flutter/foundation.dart';
import 'package:hive_flutter/hive_flutter.dart';
import '../models/pain_point.dart';
import '../models/treatment.dart';
import '../models/user_settings.dart';
import '../models/notification_session.dart';
import '../utils/hive_boxes.dart';

class DatabaseService {
  static DatabaseService? _instance;
  static DatabaseService get instance => _instance ??= DatabaseService._();
  DatabaseService._();

  bool _isInitialized = false;

  /// Initialize database (main isolate)
  Future<void> initialize() async {
    if (_isInitialized) return;

    try {
      debugPrint('üíæ Initializing DatabaseService...');

      await HiveBoxes.initHive();
      await _seedInitialData();

      _isInitialized = true;
      debugPrint('‚úÖ DatabaseService initialized');
    } catch (e) {
      debugPrint('‚ùå Error initializing DatabaseService: $e');
      rethrow;
    }
  }

  /// Initialize database in isolate (background)
  Future<void> initializeInIsolate() async {
    try {
      debugPrint('üíæ Initializing DatabaseService in isolate...');

      await HiveBoxes.initHive();
      _isInitialized = true;

      debugPrint('‚úÖ DatabaseService initialized in isolate');
    } catch (e) {
      debugPrint('‚ùå Error initializing DatabaseService in isolate: $e');
      rethrow;
    }
  }

  /// Seed initial data
  Future<void> _seedInitialData() async {
    try {
      await _seedPainPoints();
      await _seedTreatments();
      debugPrint('‚úÖ Initial data seeded');
    } catch (e) {
      debugPrint('‚ùå Error seeding initial data: $e');
    }
  }

  /// Seed pain points
  Future<void> _seedPainPoints() async {
    final box = await HiveBoxes.painPointsBox;

    if (box.isNotEmpty) return; // Already seeded

    final painPoints = [
      PainPoint(
          id: 1,
          nameTh: '‡∏®‡∏µ‡∏£‡∏©‡∏∞',
          nameEn: 'Head',
          description: '‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏ß‡∏î‡∏´‡∏±‡∏ß ‡∏ï‡∏∂‡∏á‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏®‡∏µ‡∏£‡∏©‡∏∞'),
      PainPoint(
          id: 2,
          nameTh: '‡∏ï‡∏≤',
          nameEn: 'Eyes',
          description: '‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢ ‡πÅ‡∏™‡∏ö‡∏ï‡∏≤ ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡πâ‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠'),
      PainPoint(
          id: 3,
          nameTh: '‡∏Ñ‡∏≠',
          nameEn: 'Neck',
          description: '‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≠‡πÄ‡∏Å‡πá‡∏á ‡∏õ‡∏ß‡∏î‡∏ï‡πâ‡∏ô‡∏Ñ‡∏≠ ‡∏à‡∏≤‡∏Å‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πà‡∏á‡∏ú‡∏¥‡∏î'),
      PainPoint(
          id: 4,
          nameTh: '‡∏ö‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÑ‡∏´‡∏•‡πà',
          nameEn: 'Shoulders',
          description: '‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏ß‡∏î‡∏ö‡πà‡∏≤ ‡πÑ‡∏´‡∏•‡πà‡πÅ‡∏Ç‡πá‡∏á ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô'),
      PainPoint(
          id: 5,
          nameTh: '‡∏´‡∏•‡∏±‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏ô',
          nameEn: 'Upper Back',
          description: '‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏ß‡∏î‡∏´‡∏•‡∏±‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏ô ‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ï‡∏∂‡∏á'),
      PainPoint(
          id: 6,
          nameTh: '‡∏´‡∏•‡∏±‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏•‡πà‡∏≤‡∏á',
          nameEn: 'Lower Back',
          description: '‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏ß‡∏î‡∏´‡∏•‡∏±‡∏á‡∏•‡πà‡∏≤‡∏á ‡∏à‡∏≤‡∏Å‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'),
      PainPoint(
          id: 7,
          nameTh: '‡πÅ‡∏Ç‡∏ô/‡∏®‡∏≠‡∏Å',
          nameEn: 'Arms/Elbows',
          description: '‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏ß‡∏î‡πÅ‡∏Ç‡∏ô ‡∏®‡∏≠‡∏Å ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå'),
      PainPoint(
          id: 8,
          nameTh: '‡∏Ç‡πâ‡∏≠‡∏°‡∏∑‡∏≠/‡∏°‡∏∑‡∏≠/‡∏ô‡∏¥‡πâ‡∏ß',
          nameEn: 'Wrists/Hands/Fingers',
          description: '‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏ß‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏∑‡∏≠ ‡∏°‡∏∑‡∏≠ ‡∏ô‡∏¥‡πâ‡∏ß ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå'),
      PainPoint(
          id: 9,
          nameTh: '‡∏Ç‡∏≤',
          nameEn: 'Legs',
          description: '‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏ß‡∏î‡∏Ç‡∏≤ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏Ç‡∏≤ ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô'),
      PainPoint(
          id: 10,
          nameTh: '‡πÄ‡∏ó‡πâ‡∏≤',
          nameEn: 'Feet',
          description: '‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏ß‡∏î‡πÄ‡∏ó‡πâ‡∏≤ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡πÄ‡∏ó‡πâ‡∏≤ ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ô‡∏±‡πà‡∏á‡∏ô‡∏≤‡∏ô'),
    ];

    for (final painPoint in painPoints) {
      await box.put(painPoint.id, painPoint);
    }

    debugPrint('‚úÖ Pain points seeded: ${painPoints.length} items');
  }

  /// Seed treatments (25+ exercises)
  Future<void> _seedTreatments() async {
    final box = await HiveBoxes.treatmentsBox;

    if (box.isNotEmpty) return; // Already seeded

    final treatments = [
      // HEAD EXERCISES (ID 1)
      Treatment.createRelaxation(
        id: 1,
        nameTh: '‡∏ô‡∏ß‡∏î‡∏´‡∏ô‡∏±‡∏á‡∏®‡∏µ‡∏£‡∏©‡∏∞',
        nameEn: 'Scalp Massage',
        description: '‡∏ô‡∏ß‡∏î‡∏´‡∏ô‡∏±‡∏á‡∏®‡∏µ‡∏£‡∏©‡∏∞‡πÄ‡∏ö‡∏≤‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏∞‡∏ï‡∏∏‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏•‡πÄ‡∏ß‡∏µ‡∏¢‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î',
        instructions: [
          '‡πÉ‡∏ä‡πâ‡∏õ‡∏•‡∏≤‡∏¢‡∏ô‡∏¥‡πâ‡∏ß‡∏ô‡∏ß‡∏î‡∏´‡∏ô‡∏±‡∏á‡∏®‡∏µ‡∏£‡∏©‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏á‡∏Å‡∏•‡∏°',
          '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏ú‡∏≤‡∏Å‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏ó‡∏≠‡∏¢',
          '‡∏Å‡∏î‡πÄ‡∏ö‡∏≤‡πÜ ‡πÅ‡∏•‡∏∞‡∏ô‡∏ß‡∏î‡∏ä‡πâ‡∏≤‡πÜ',
        ],
        painPointId: 1,
        benefits: ['‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î', '‡∏Å‡∏£‡∏∞‡∏ï‡∏∏‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏•‡πÄ‡∏ß‡∏µ‡∏¢‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î', '‡∏•‡∏î‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏ß‡∏î‡∏´‡∏±‡∏ß'],
      ),

      Treatment.createStretch(
        id: 2,
        nameTh: '‡∏´‡∏°‡∏∏‡∏ô‡∏Ñ‡∏≠‡∏ä‡πâ‡∏≤‡πÜ',
        nameEn: 'Slow Neck Rolls',
        description: '‡∏´‡∏°‡∏∏‡∏ô‡∏Ñ‡∏≠‡∏ä‡πâ‡∏≤‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏∂‡∏á‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î',
        instructions: [
          '‡∏ô‡∏±‡πà‡∏á‡∏ï‡∏£‡∏á ‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢‡πÑ‡∏´‡∏•‡πà',
          '‡∏´‡∏°‡∏∏‡∏ô‡∏´‡∏±‡∏ß‡∏ä‡πâ‡∏≤‡πÜ ‡∏ï‡∏≤‡∏°‡πÄ‡∏Ç‡πá‡∏°‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤ 5 ‡∏£‡∏≠‡∏ö',
          '‡∏´‡∏°‡∏∏‡∏ô‡∏ó‡∏ß‡∏ô‡πÄ‡∏Ç‡πá‡∏°‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤ 5 ‡∏£‡∏≠‡∏ö',
        ],
        painPointId: 1,
        benefits: ['‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏∂‡∏á‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î', '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô'],
        warnings: '‡∏´‡∏°‡∏∏‡∏ô‡∏ä‡πâ‡∏≤‡πÜ ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏£‡πá‡∏ß‡∏à‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ',
      ),

      // EYE EXERCISES (ID 2)
      Treatment.createRelaxation(
        id: 3,
        nameTh: '‡∏û‡∏±‡∏Å‡∏™‡∏≤‡∏¢‡∏ï‡∏≤ 20-20-20',
        nameEn: '20-20-20 Eye Rest',
        description:
            '‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏Å‡∏™‡∏≤‡∏¢‡∏ï‡∏≤ ‡∏ó‡∏∏‡∏Å 20 ‡∏ô‡∏≤‡∏ó‡∏µ ‡∏°‡∏≠‡∏á 20 ‡∏ü‡∏∏‡∏ï ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 20 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ',
        instructions: [
          '‡∏´‡∏¢‡∏∏‡∏î‡∏°‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠',
          '‡∏°‡∏≠‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏î‡πÑ‡∏Å‡∏•‡πÜ (20 ‡∏ü‡∏∏‡∏ï ‡∏´‡∏£‡∏∑‡∏≠ 6 ‡πÄ‡∏°‡∏ï‡∏£)',
          '‡∏à‡πâ‡∏≠‡∏á‡∏°‡∏≠‡∏á 20 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ',
        ],
        painPointId: 2,
        duration: 20,
        benefits: ['‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏•‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤', '‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏™‡∏≤‡∏¢‡∏ï‡∏≤‡πÄ‡∏™‡∏∑‡πà‡∏≠‡∏°'],
      ),

      Treatment.createStretch(
        id: 4,
        nameTh: '‡∏¢‡∏∑‡∏î‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ï‡∏≤',
        nameEn: 'Eye Muscle Stretching',
        description: '‡∏Ç‡∏¢‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏ï‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ',
        instructions: [
          '‡∏°‡∏≠‡∏á‡∏Ç‡∏∂‡πâ‡∏ô-‡∏•‡πà‡∏≤‡∏á 5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
          '‡∏°‡∏≠‡∏á‡∏ã‡πâ‡∏≤‡∏¢-‡∏Ç‡∏ß‡∏≤ 5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
          '‡∏´‡∏°‡∏∏‡∏ô‡∏•‡∏π‡∏Å‡∏ï‡∏≤‡∏ï‡∏≤‡∏°‡πÄ‡∏Ç‡πá‡∏°‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤ 5 ‡∏£‡∏≠‡∏ö',
          '‡∏´‡∏•‡∏±‡∏ö‡∏ï‡∏≤‡∏û‡∏±‡∏Å 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ',
        ],
        painPointId: 2,
        repetitions: 3,
      ),

      // NECK EXERCISES (ID 3)
      Treatment.createStretch(
        id: 5,
        nameTh: '‡∏¢‡∏∑‡∏î‡∏Ñ‡∏≠‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á',
        nameEn: 'Lateral Neck Stretch',
        description: '‡∏¢‡∏∑‡∏î‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏Ñ‡∏≠‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á',
        instructions: [
          '‡πÄ‡∏≠‡∏µ‡∏¢‡∏á‡∏´‡∏±‡∏ß‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤',
          '‡πÉ‡∏ä‡πâ‡∏°‡∏∑‡∏≠‡∏Ç‡∏ß‡∏≤‡∏î‡∏∂‡∏á‡∏´‡∏±‡∏ß‡πÄ‡∏ö‡∏≤‡πÜ',
          '‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ 15 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ',
          '‡∏™‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏≤‡∏ô',
        ],
        painPointId: 3,
        benefits: ['‡∏¢‡∏∑‡∏î‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏Ñ‡∏≠', '‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡πá‡∏á'],
        warnings: '‡∏î‡∏∂‡∏á‡πÄ‡∏ö‡∏≤‡πÜ ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡πÅ‡∏£‡∏á‡∏°‡∏≤‡∏Å',
      ),

      Treatment.createStretch(
        id: 6,
        nameTh: '‡∏¢‡∏∑‡∏î‡∏Ñ‡∏≠‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤-‡∏´‡∏•‡∏±‡∏á',
        nameEn: 'Forward-Backward Neck Stretch',
        description: '‡∏¢‡∏∑‡∏î‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏Ñ‡∏≠‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏á',
        instructions: [
          '‡∏Å‡πâ‡∏°‡∏´‡∏±‡∏ß‡∏•‡∏á ‡πÅ‡∏ï‡∏∞‡∏Ñ‡∏≤‡∏á‡∏Å‡∏±‡∏ö‡∏≠‡∏Å',
          '‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ',
          '‡πÄ‡∏á‡∏¢‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏ö‡∏≤‡πÜ',
          '‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ',
        ],
        painPointId: 3,
        repetitions: 5,
      ),

      // SHOULDER EXERCISES (ID 4)
      Treatment.createStretch(
        id: 7,
        nameTh: '‡∏¢‡∏Å‡πÑ‡∏´‡∏•‡πà‡∏Ç‡∏∂‡πâ‡∏ô-‡∏•‡∏á',
        nameEn: 'Shoulder Shrugs',
        description: '‡∏¢‡∏Å‡πÑ‡∏´‡∏•‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏•‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏∂‡∏á‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î',
        instructions: [
          '‡∏¢‡∏Å‡πÑ‡∏´‡∏•‡πà‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏π‡πà‡∏´‡∏π',
          '‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ',
          '‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏•‡∏á‡∏ä‡πâ‡∏≤‡πÜ',
          '‡∏ó‡∏≥ 10 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
        ],
        painPointId: 4,
        repetitions: 10,
        benefits: ['‡∏Ñ‡∏•‡∏≤‡∏¢‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÑ‡∏´‡∏•‡πà', '‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏∂‡∏á‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î'],
      ),

      Treatment.createStretch(
        id: 8,
        nameTh: '‡∏´‡∏°‡∏∏‡∏ô‡πÑ‡∏´‡∏•‡πà',
        nameEn: 'Shoulder Rolls',
        description: '‡∏´‡∏°‡∏∏‡∏ô‡πÑ‡∏´‡∏•‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô',
        instructions: [
          '‡∏´‡∏°‡∏∏‡∏ô‡πÑ‡∏´‡∏•‡πà‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ 10 ‡∏£‡∏≠‡∏ö',
          '‡∏´‡∏°‡∏∏‡∏ô‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á 10 ‡∏£‡∏≠‡∏ö',
          '‡∏´‡∏°‡∏∏‡∏ô‡∏ä‡πâ‡∏≤‡πÜ ‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡πá‡∏°‡∏ß‡∏á‡∏Å‡∏•‡∏°',
        ],
        painPointId: 4,
        repetitions: 20,
      ),

      Treatment.createStretch(
        id: 9,
        nameTh: '‡∏¢‡∏∑‡∏î‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÑ‡∏´‡∏•‡πà',
        nameEn: 'Cross-Body Shoulder Stretch',
        description: '‡∏¢‡∏∑‡∏î‡πÑ‡∏´‡∏•‡πà‡∏Ç‡πâ‡∏≤‡∏°‡∏ï‡∏±‡∏ß',
        instructions: [
          '‡πÄ‡∏´‡∏¢‡∏µ‡∏¢‡∏î‡πÅ‡∏Ç‡∏ô‡∏Ç‡∏ß‡∏≤‡∏Ç‡πâ‡∏≤‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏Å',
          '‡πÉ‡∏ä‡πâ‡πÅ‡∏Ç‡∏ô‡∏ã‡πâ‡∏≤‡∏¢‡∏Å‡∏≠‡∏î‡∏î‡∏∂‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏≤‡∏ï‡∏±‡∏ß',
          '‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ 15 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ',
          '‡∏™‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏≤‡∏ô',
        ],
        painPointId: 4,
        duration: 30,
      ),

      // UPPER BACK EXERCISES (ID 5)
      Treatment.createStretch(
        id: 10,
        nameTh: '‡∏¢‡∏∑‡∏î‡∏´‡∏•‡∏±‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏ô',
        nameEn: 'Upper Back Stretch',
        description: '‡∏¢‡∏∑‡∏î‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏ô',
        instructions: [
          '‡∏¢‡∏Å‡πÅ‡∏Ç‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ç‡∏∂‡πâ‡∏ô',
          '‡∏à‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡∏∞‡∏î‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤',
          '‡πÇ‡∏Ñ‡πâ‡∏á‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢',
          '‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ 20 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ',
        ],
        painPointId: 5,
        benefits: ['‡∏¢‡∏∑‡∏î‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏ô', '‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏∂‡∏á‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î'],
      ),

      Treatment.createStretch(
        id: 11,
        nameTh: '‡∏ö‡∏¥‡∏î‡∏ï‡∏±‡∏ß',
        nameEn: 'Seated Spinal Twist',
        description: '‡∏ö‡∏¥‡∏î‡∏•‡∏≥‡∏ï‡∏±‡∏ß‡∏Ç‡∏ì‡∏∞‡∏ô‡∏±‡πà‡∏á',
        instructions: [
          '‡∏ô‡∏±‡πà‡∏á‡∏ï‡∏£‡∏á ‡πÄ‡∏ó‡πâ‡∏≤‡πÅ‡∏ô‡∏ö‡∏û‡∏∑‡πâ‡∏ô',
          '‡∏ß‡∏≤‡∏á‡∏°‡∏∑‡∏≠‡∏ã‡πâ‡∏≤‡∏¢‡∏ö‡∏ô‡πÄ‡∏Ç‡πà‡∏≤‡∏Ç‡∏ß‡∏≤',
          '‡∏ö‡∏¥‡∏î‡∏ï‡∏±‡∏ß‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤‡πÄ‡∏ö‡∏≤‡πÜ',
          '‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ 15 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏≤‡∏ô',
        ],
        painPointId: 5,
        repetitions: 4,
      ),

      // LOWER BACK EXERCISES (ID 6)
      Treatment.createStretch(
        id: 12,
        nameTh: '‡∏¢‡∏∑‡∏î‡∏´‡∏•‡∏±‡∏á‡πÇ‡∏Ñ‡πâ‡∏á',
        nameEn: 'Cat-Cow Stretch (Seated)',
        description: '‡πÇ‡∏Ñ‡πâ‡∏á‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏õ-‡∏°‡∏≤‡∏Ç‡∏ì‡∏∞‡∏ô‡∏±‡πà‡∏á',
        instructions: [
          '‡∏ô‡∏±‡πà‡∏á‡∏ï‡∏£‡∏á ‡∏°‡∏∑‡∏≠‡∏ß‡∏≤‡∏á‡∏ö‡∏ô‡∏ï‡πâ‡∏ô‡∏Ç‡∏≤',
          '‡πÇ‡∏Ñ‡πâ‡∏á‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ (‡∏ß‡∏±‡∏ß)',
          '‡∏á‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏∂‡πâ‡∏ô (‡πÅ‡∏°‡∏ß)',
          '‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ-‡∏°‡∏≤ 10 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
        ],
        painPointId: 6,
        repetitions: 10,
        benefits: ['‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏π‡∏Å‡∏™‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á'],
      ),

      Treatment.createStretch(
        id: 13,
        nameTh: '‡∏Å‡∏≠‡∏î‡πÄ‡∏Ç‡πà‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏Å',
        nameEn: 'Knee to Chest (Seated)',
        description: '‡∏Å‡∏≠‡∏î‡πÄ‡∏Ç‡πà‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏Å‡∏Ç‡∏ì‡∏∞‡∏ô‡∏±‡πà‡∏á',
        instructions: [
          '‡∏ô‡∏±‡πà‡∏á‡∏ï‡∏£‡∏á',
          '‡∏¢‡∏Å‡πÄ‡∏Ç‡πà‡∏≤‡∏Ç‡∏ß‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô',
          '‡∏Å‡∏≠‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏Å‡πÄ‡∏ö‡∏≤‡πÜ',
          '‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏•‡∏±‡∏ö‡∏Ç‡∏≤',
        ],
        painPointId: 6,
        repetitions: 6,
      ),

      // ARM/ELBOW EXERCISES (ID 7)
      Treatment.createStretch(
        id: 14,
        nameTh: '‡∏¢‡∏∑‡∏î‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÅ‡∏Ç‡∏ô',
        nameEn: 'Triceps Stretch',
        description: '‡∏¢‡∏∑‡∏î‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏Ç‡∏ô',
        instructions: [
          '‡∏¢‡∏Å‡πÅ‡∏Ç‡∏ô‡∏Ç‡∏ß‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô',
          '‡∏á‡∏≠‡∏®‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏°‡∏∑‡∏≠‡πÑ‡∏õ‡πÅ‡∏ï‡∏∞‡∏´‡∏•‡∏±‡∏á',
          '‡πÉ‡∏ä‡πâ‡∏°‡∏∑‡∏≠‡∏ã‡πâ‡∏≤‡∏¢‡∏î‡∏±‡∏ô‡∏®‡∏≠‡∏Å‡πÄ‡∏ö‡∏≤‡πÜ',
          '‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ 15 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏•‡∏±‡∏ö‡πÅ‡∏Ç‡∏ô',
        ],
        painPointId: 7,
        benefits: ['‡∏¢‡∏∑‡∏î‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÅ‡∏Ç‡∏ô', '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô'],
      ),

      Treatment.createStretch(
        id: 15,
        nameTh: '‡∏¢‡∏∑‡∏î‡∏Ç‡πâ‡∏≠‡∏®‡∏≠‡∏Å',
        nameEn: 'Elbow Extension',
        description: '‡πÄ‡∏´‡∏¢‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡∏∞‡∏á‡∏≠‡∏Ç‡πâ‡∏≠‡∏®‡∏≠‡∏Å',
        instructions: [
          '‡πÄ‡∏´‡∏¢‡∏µ‡∏¢‡∏î‡πÅ‡∏Ç‡∏ô‡∏ï‡∏£‡∏á‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤',
          '‡∏á‡∏≠‡∏®‡∏≠‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô-‡∏•‡∏á',
          '‡∏ó‡∏≥‡∏ä‡πâ‡∏≤‡πÜ ‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà',
          '‡∏ó‡∏≥ 15 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
        ],
        painPointId: 7,
        repetitions: 15,
      ),

      // WRIST/HAND EXERCISES (ID 8)
      Treatment.createStretch(
        id: 16,
        nameTh: '‡∏¢‡∏∑‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏∑‡∏≠',
        nameEn: 'Wrist Stretch',
        description: '‡∏¢‡∏∑‡∏î‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏∑‡∏≠',
        instructions: [
          '‡πÄ‡∏´‡∏¢‡∏µ‡∏¢‡∏î‡πÅ‡∏Ç‡∏ô‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤',
          '‡∏á‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏∑‡∏≠‡∏Ç‡∏∂‡πâ‡∏ô ‡πÉ‡∏ä‡πâ‡∏°‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å‡∏Ç‡πâ‡∏≤‡∏á‡∏î‡∏±‡∏ô‡πÄ‡∏ö‡∏≤‡πÜ',
          '‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ',
          '‡∏á‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏∑‡∏≠‡∏•‡∏á ‡πÉ‡∏ä‡πâ‡∏°‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å‡∏Ç‡πâ‡∏≤‡∏á‡∏î‡∏±‡∏ô‡πÄ‡∏ö‡∏≤‡πÜ',
          '‡∏™‡∏•‡∏±‡∏ö‡∏°‡∏∑‡∏≠',
        ],
        painPointId: 8,
        repetitions: 4,
        warnings: '‡∏î‡∏±‡∏ô‡πÄ‡∏ö‡∏≤‡πÜ ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡πÅ‡∏£‡∏á‡∏°‡∏≤‡∏Å',
      ),

      Treatment.createStretch(
        id: 17,
        nameTh: '‡∏´‡∏°‡∏∏‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏∑‡∏≠',
        nameEn: 'Wrist Circles',
        description: '‡∏´‡∏°‡∏∏‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏∑‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô',
        instructions: [
          '‡πÄ‡∏´‡∏¢‡∏µ‡∏¢‡∏î‡πÅ‡∏Ç‡∏ô‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤',
          '‡∏´‡∏°‡∏∏‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡πÄ‡∏Ç‡πá‡∏°‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤ 10 ‡∏£‡∏≠‡∏ö',
          '‡∏´‡∏°‡∏∏‡∏ô‡∏ó‡∏ß‡∏ô‡πÄ‡∏Ç‡πá‡∏°‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤ 10 ‡∏£‡∏≠‡∏ö',
          '‡∏™‡∏•‡∏±‡∏ö‡∏°‡∏∑‡∏≠',
        ],
        painPointId: 8,
        repetitions: 20,
      ),

      Treatment.createStrengthening(
        id: 18,
        nameTh: '‡∏ö‡∏µ‡∏ö‡∏°‡∏∑‡∏≠',
        nameEn: 'Hand Squeeze',
        description: '‡∏ö‡∏µ‡∏ö‡∏°‡∏∑‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠',
        instructions: [
          '‡∏ö‡∏µ‡∏ö‡∏°‡∏∑‡∏≠‡πÅ‡∏ô‡πà‡∏ô',
          '‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ',
          '‡∏Ñ‡∏•‡∏≤‡∏¢‡∏°‡∏∑‡∏≠',
          '‡∏ó‡∏≥ 10 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
        ],
        painPointId: 8,
        repetitions: 10,
      ),

      // LEG EXERCISES (ID 9)
      Treatment.createStretch(
        id: 19,
        nameTh: '‡∏¢‡∏∑‡∏î‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≤',
        nameEn: 'Quadriceps Stretch (Seated)',
        description: '‡∏¢‡∏∑‡∏î‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≤‡∏Ç‡∏ì‡∏∞‡∏ô‡∏±‡πà‡∏á',
        instructions: [
          '‡∏ô‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Å‡πâ‡∏≤‡∏≠‡∏µ‡πâ',
          '‡πÄ‡∏´‡∏¢‡∏µ‡∏¢‡∏î‡∏Ç‡∏≤‡∏Ç‡∏ß‡∏≤‡∏ï‡∏£‡∏á',
          '‡∏á‡∏≠‡πÄ‡∏ó‡πâ‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô',
          '‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ 15 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏•‡∏±‡∏ö‡∏Ç‡∏≤',
        ],
        painPointId: 9,
        benefits: ['‡∏¢‡∏∑‡∏î‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤', '‡∏Å‡∏£‡∏∞‡∏ï‡∏∏‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏•‡πÄ‡∏ß‡∏µ‡∏¢‡∏ô'],
      ),

      Treatment.createStretch(
        id: 20,
        nameTh: '‡∏¢‡∏Å‡∏Ç‡∏≤‡∏™‡∏•‡∏±‡∏ö',
        nameEn: 'Alternating Leg Lifts',
        description: '‡∏¢‡∏Å‡∏Ç‡∏≤‡∏™‡∏•‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏∞‡∏ï‡∏∏‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏•‡πÄ‡∏ß‡∏µ‡∏¢‡∏ô',
        instructions: [
          '‡∏ô‡∏±‡πà‡∏á‡∏ï‡∏£‡∏á',
          '‡∏¢‡∏Å‡∏Ç‡∏≤‡∏Ç‡∏ß‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô',
          '‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ',
          '‡∏ß‡∏≤‡∏á‡∏•‡∏á ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏•‡∏±‡∏ö‡∏Ç‡∏≤',
          '‡∏ó‡∏≥ 10 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≤‡∏á',
        ],
        painPointId: 9,
        repetitions: 20,
      ),

      // FEET EXERCISES (ID 10)
      Treatment.createStretch(
        id: 21,
        nameTh: '‡∏¢‡∏∑‡∏î‡∏Ç‡πâ‡∏≠‡πÄ‡∏ó‡πâ‡∏≤',
        nameEn: 'Ankle Stretch',
        description: '‡∏¢‡∏∑‡∏î‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏Ç‡πâ‡∏≠‡πÄ‡∏ó‡πâ‡∏≤',
        instructions: [
          '‡∏¢‡∏Å‡∏Ç‡∏≤‡∏Ç‡∏ß‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢',
          '‡∏á‡∏≠‡πÄ‡∏ó‡πâ‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô-‡∏•‡∏á',
          '‡∏ó‡∏≥ 15 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
          '‡∏™‡∏•‡∏±‡∏ö‡πÄ‡∏ó‡πâ‡∏≤',
        ],
        painPointId: 10,
        repetitions: 30,
      ),

      Treatment.createStretch(
        id: 22,
        nameTh: '‡∏´‡∏°‡∏∏‡∏ô‡∏Ç‡πâ‡∏≠‡πÄ‡∏ó‡πâ‡∏≤',
        nameEn: 'Ankle Circles',
        description: '‡∏´‡∏°‡∏∏‡∏ô‡∏Ç‡πâ‡∏≠‡πÄ‡∏ó‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô',
        instructions: [
          '‡∏¢‡∏Å‡∏Ç‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢',
          '‡∏´‡∏°‡∏∏‡∏ô‡∏Ç‡πâ‡∏≠‡πÄ‡∏ó‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡πÄ‡∏Ç‡πá‡∏°‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤ 10 ‡∏£‡∏≠‡∏ö',
          '‡∏´‡∏°‡∏∏‡∏ô‡∏ó‡∏ß‡∏ô‡πÄ‡∏Ç‡πá‡∏°‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤ 10 ‡∏£‡∏≠‡∏ö',
          '‡∏™‡∏•‡∏±‡∏ö‡πÄ‡∏ó‡πâ‡∏≤',
        ],
        painPointId: 10,
        repetitions: 40,
      ),

      // GENERAL EXERCISES (Multiple pain points)
      Treatment.createRelaxation(
        id: 23,
        nameTh: '‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏•‡∏∂‡∏Å',
        nameEn: 'Deep Breathing',
        description: '‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏•‡∏∂‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢',
        instructions: [
          '‡∏ô‡∏±‡πà‡∏á‡∏ï‡∏£‡∏á ‡∏ï‡∏≤‡πÄ‡∏ö‡∏≤‡πÜ',
          '‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡πÄ‡∏Ç‡πâ‡∏≤‡∏ó‡∏≤‡∏á‡∏à‡∏°‡∏π‡∏Å 4 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ',
          '‡∏Å‡∏•‡∏±‡πâ‡∏ô‡∏´‡∏≤‡∏¢‡πÉ‡∏à 4 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ',
          '‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏≠‡∏≠‡∏Å‡∏ó‡∏≤‡∏á‡∏õ‡∏≤‡∏Å 6 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ',
          '‡∏ó‡∏≥ 5 ‡∏£‡∏≠‡∏ö',
        ],
        painPointId: 1, // Head - but good for all
        duration: 60,
        benefits: ['‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î', '‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢‡∏à‡∏¥‡∏ï‡πÉ‡∏à', '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏≠‡∏Å‡∏ã‡∏¥‡πÄ‡∏à‡∏ô'],
      ),

      Treatment.createStretch(
        id: 24,
        nameTh: '‡∏¢‡∏∑‡∏î‡πÅ‡∏Ç‡∏ô-‡∏Ç‡∏≤',
        nameEn: 'Full Body Stretch',
        description: '‡∏¢‡∏∑‡∏î‡πÄ‡∏´‡∏¢‡∏µ‡∏¢‡∏î‡πÅ‡∏Ç‡∏ô‡∏Ç‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏ï‡∏±‡∏ß',
        instructions: [
          '‡∏¢‡∏∑‡∏ô‡∏ï‡∏£‡∏á',
          '‡∏¢‡∏Å‡πÅ‡∏Ç‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏®‡∏µ‡∏£‡∏©‡∏∞',
          '‡∏¢‡∏∑‡∏î‡πÄ‡∏ó‡πâ‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢',
          '‡∏¢‡∏∑‡∏î‡πÄ‡∏´‡∏¢‡∏µ‡∏¢‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏ï‡∏±‡∏ß 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ',
        ],
        painPointId: 5, // Upper back - but good for all
        benefits: ['‡∏¢‡∏∑‡∏î‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏ï‡∏±‡∏ß', '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏∑‡πà‡∏ô‡∏ï‡∏±‡∏ß'],
      ),

      Treatment.createRelaxation(
        id: 25,
        nameTh: '‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏ï‡∏±‡∏ß',
        nameEn: 'Progressive Muscle Relaxation',
        description: '‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô',
        instructions: [
          '‡∏ô‡∏±‡πà‡∏á‡∏™‡∏ö‡∏≤‡∏¢‡πÜ',
          '‡πÄ‡∏Å‡∏£‡πá‡∏á‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÄ‡∏ó‡πâ‡∏≤ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏•‡∏≤‡∏¢',
          '‡πÄ‡∏Å‡∏£‡πá‡∏á‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏•‡∏≤‡∏¢',
          '‡∏ó‡∏≥‡πÑ‡∏õ‡∏ó‡∏±‡πà‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏ï‡∏±‡∏ß‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡∏®‡∏µ‡∏£‡∏©‡∏∞',
        ],
        painPointId: 6, // Lower back - but good for all
        duration: 120,
        benefits: ['‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏ï‡∏±‡∏ß', '‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î'],
      ),
    ];

    for (final treatment in treatments) {
      await box.put(treatment.id, treatment);
    }

    debugPrint('‚úÖ Treatments seeded: ${treatments.length} items');
  }

  /// Load user settings
  Future<UserSettings> loadSettings() async {
    final box = await HiveBoxes.settingsBox;
    final settings = box.get('user_settings');

    if (settings == null) {
      final defaultSettings = UserSettings.defaultSettings();
      await saveSettings(defaultSettings);
      return defaultSettings;
    }

    return settings;
  }

  /// Save user settings
  Future<void> saveSettings(UserSettings settings) async {
    final box = await HiveBoxes.settingsBox;
    await box.put('user_settings', settings);
    debugPrint('üíæ Settings saved');
  }

  /// Get pain point by ID
  Future<PainPoint?> getPainPointById(int id) async {
    final box = await HiveBoxes.painPointsBox;
    return box.get(id);
  }

  /// Get all pain points
  Future<List<PainPoint>> getAllPainPoints() async {
    final box = await HiveBoxes.painPointsBox;
    return box.values.cast<PainPoint>().toList();
  }

  /// Get treatments by pain point ID
  Future<List<Treatment>> getTreatmentsByPainPointId(int painPointId) async {
    final box = await HiveBoxes.treatmentsBox;
    return box.values
        .cast<Treatment>()
        .where((treatment) =>
            treatment.painPointId == painPointId && treatment.isActive)
        .toList();
  }

  /// Get treatments by IDs
  Future<List<Treatment>> getTreatmentsByIds(List<int> ids) async {
    final box = await HiveBoxes.treatmentsBox;
    return ids
        .map((id) => box.get(id))
        .where((treatment) => treatment != null)
        .cast<Treatment>()
        .toList();
  }

  /// Save notification session
  Future<void> saveNotificationSession(NotificationSession session) async {
    final box = await HiveBoxes.notificationSessionsBox;
    await box.put(session.id, session);
    debugPrint('üíæ Notification session saved: ${session.id}');
  }

  /// Get notification session
  Future<NotificationSession?> getNotificationSession(String id) async {
    final box = await HiveBoxes.notificationSessionsBox;
    return box.get(id);
  }

  /// Get recent sessions (for statistics)
  Future<List<NotificationSession>> getRecentSessions({int days = 7}) async {
    final box = await HiveBoxes.notificationSessionsBox;
    final cutoff = DateTime.now().subtract(Duration(days: days));

    return box.values
        .cast<NotificationSession>()
        .where((session) => session.scheduledTime.isAfter(cutoff))
        .toList()
      ..sort((a, b) => b.scheduledTime.compareTo(a.scheduledTime));
  }

  /// Clear old sessions (cleanup)
  Future<void> clearOldSessions({int keepDays = 30}) async {
    try {
      final box = await HiveBoxes.notificationSessionsBox;
      final cutoff = DateTime.now().subtract(Duration(days: keepDays));

      final oldSessionIds = box.values
          .cast<NotificationSession>()
          .where((session) => session.scheduledTime.isBefore(cutoff))
          .map((session) => session.id)
          .toList();

      for (final id in oldSessionIds) {
        await box.delete(id);
      }

      debugPrint('üóëÔ∏è Cleared ${oldSessionIds.length} old sessions');
    } catch (e) {
      debugPrint('‚ùå Error clearing old sessions: $e');
    }
  }

  /// Get statistics data
  Future<Map<String, dynamic>> getStatistics({int days = 7}) async {
    try {
      final sessions = await getRecentSessions(days: days);

      final total = sessions.length;
      final completed =
          sessions.where((s) => s.status == SessionStatusHive.completed).length;
      final skipped =
          sessions.where((s) => s.status == SessionStatusHive.skipped).length;
      final snoozed =
          sessions.where((s) => s.status == SessionStatusHive.snoozed).length;

      final completionRate = total > 0 ? completed / total : 0.0;

      return {
        'totalSessions': total,
        'completedSessions': completed,
        'skippedSessions': skipped,
        'snoozedSessions': snoozed,
        'completionRate': completionRate,
        'sessions': sessions,
      };
    } catch (e) {
      debugPrint('‚ùå Error getting statistics: $e');
      return {
        'totalSessions': 0,
        'completedSessions': 0,
        'skippedSessions': 0,
        'snoozedSessions': 0,
        'completionRate': 0.0,
        'sessions': <NotificationSession>[],
      };
    }
  }

  /// Factory reset (clear all data)
  Future<void> factoryReset() async {
    try {
      await HiveBoxes.clearAllData();
      await _seedInitialData();
      debugPrint('üîÑ Factory reset completed');
    } catch (e) {
      debugPrint('‚ùå Error during factory reset: $e');
      rethrow;
    }
  }

  /// Export data (for backup)
  Future<Map<String, dynamic>> exportData() async {
    try {
      final settings = await loadSettings();
      final sessions = await getRecentSessions(days: 365); // Last year

      return {
        'version': '1.0',
        'exportDate': DateTime.now().toIso8601String(),
        'settings': {
          'selectedPainPointIds': settings.selectedPainPointIds,
          'notificationInterval': settings.notificationInterval,
          'isNotificationEnabled': settings.isNotificationEnabled,
          'isSoundEnabled': settings.isSoundEnabled,
          'isVibrationEnabled': settings.isVibrationEnabled,
          'workStartTime': settings.workStartTime,
          'workEndTime': settings.workEndTime,
          'workingDays': settings.workingDays,
          'breakTimes': settings.breakTimes,
          'snoozeInterval': settings.snoozeInterval,
        },
        'sessions': sessions
            .map((session) => {
                  'id': session.id,
                  'scheduledTime': session.scheduledTime.toIso8601String(),
                  'painPointId': session.painPointId,
                  'treatmentIds': session.treatmentIds,
                  'status': session.status.index,
                  'completedTime': session.completedTime?.toIso8601String(),
                })
            .toList(),
      };
    } catch (e) {
      debugPrint('‚ùå Error exporting data: $e');
      rethrow;
    }
  }

  /// Import data (from backup)
  Future<bool> importData(Map<String, dynamic> data) async {
    try {
      // Validate data structure
      if (data['version'] != '1.0') {
        debugPrint('‚ùå Unsupported backup version');
        return false;
      }

      // Import settings
      final settingsData = data['settings'] as Map<String, dynamic>;
      final currentSettings = await loadSettings();

      final importedSettings = currentSettings.copyWith(
        selectedPainPointIds:
            List<int>.from(settingsData['selectedPainPointIds'] ?? []),
        notificationInterval: settingsData['notificationInterval'] ?? 60,
        isNotificationEnabled: settingsData['isNotificationEnabled'] ?? true,
        isSoundEnabled: settingsData['isSoundEnabled'] ?? true,
        isVibrationEnabled: settingsData['isVibrationEnabled'] ?? true,
        workStartTime: settingsData['workStartTime'] ?? '09:00',
        workEndTime: settingsData['workEndTime'] ?? '17:00',
        workingDays:
            List<int>.from(settingsData['workingDays'] ?? [1, 2, 3, 4, 5]),
        breakTimes: settingsData['breakTimes'] != null
            ? List<String>.from(settingsData['breakTimes'])
            : null,
        snoozeInterval: settingsData['snoozeInterval'] ?? 5,
      );

      await saveSettings(importedSettings);

      // Import sessions (optional - might be too much data)
      // final sessionsData = data['sessions'] as List<dynamic>;
      // ... implement if needed

      debugPrint('‚úÖ Data imported successfully');
      return true;
    } catch (e) {
      debugPrint('‚ùå Error importing data: $e');
      return false;
    }
  }

  /// Check database health
  Future<bool> checkDatabaseHealth() async {
    try {
      final painPointsBox = await HiveBoxes.painPointsBox;
      final treatmentsBox = await HiveBoxes.treatmentsBox;
      final settingsBox = await HiveBoxes.settingsBox;

      // Check if essential data exists
      if (painPointsBox.isEmpty || treatmentsBox.isEmpty) {
        debugPrint('‚ö†Ô∏è Missing essential data, re-seeding...');
        await _seedInitialData();
      }

      // Check settings
      final settings = settingsBox.get('user_settings');
      if (settings == null) {
        debugPrint('‚ö†Ô∏è Missing user settings, creating default...');
        await saveSettings(UserSettings.defaultSettings());
      }

      debugPrint('‚úÖ Database health check passed');
      return true;
    } catch (e) {
      debugPrint('‚ùå Database health check failed: $e');
      return false;
    }
  }
}
