import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:timezone/data/latest.dart' as tz;
import 'package:timezone/timezone.dart' as tz;
import 'package:android_alarm_manager_plus/android_alarm_manager_plus.dart';
import 'package:uuid/uuid.dart';
import 'package:flutter/foundation.dart';
import '../models/notification_session.dart';
import '../models/user_settings.dart';
import 'database_service.dart';
import 'random_service.dart';

class NotificationService {
  static NotificationService? _instance;
  static NotificationService get instance =>
      _instance ??= NotificationService._();
  NotificationService._();

  final FlutterLocalNotificationsPlugin _notifications =
      FlutterLocalNotificationsPlugin();
  final Uuid _uuid = const Uuid();

  bool _isInitialized = false;

  /// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô notification service
  Future<void> initialize() async {
    if (_isInitialized) return;

    // Initialize timezone
    tz.initializeTimeZones();
    tz.setLocalLocation(tz.getLocation('Asia/Bangkok'));

    // Initialize Android Alarm Manager
    await AndroidAlarmManager.initialize();

    // Initialize notifications
    const androidSettings =
        AndroidInitializationSettings('@mipmap/ic_launcher');
    const iosSettings = DarwinInitializationSettings(
      requestAlertPermission: true,
      requestBadgePermission: true,
      requestSoundPermission: true,
    );

    const settings = InitializationSettings(
      android: androidSettings,
      iOS: iosSettings,
    );

    await _notifications.initialize(
      settings,
      onDidReceiveNotificationResponse: _onNotificationTap,
    );

    _isInitialized = true;
  }

  /// ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î notification
  void _onNotificationTap(NotificationResponse response) {
    final sessionId = response.payload;
    if (sessionId != null) {
      // Navigate to TodoPage with sessionId
      // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á routes ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ:
      // Get.toNamed(AppRoutes.todo, arguments: sessionId);

      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ print debug
      debugPrint('üîî Notification tapped: $sessionId');
    }
  }

  /// ‡∏ï‡∏±‡πâ‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ
  Future<void> scheduleNextNotification() async {
    final settings = DatabaseService.instance.getUserSettings();

    if (!settings.notificationsEnabled) return;
    if (!settings.hasSelectedPainPoints) return;

    final nextTime = _calculateNextNotificationTime(settings);
    if (nextTime == null) return;

    // ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å pain point ‡πÅ‡∏•‡∏∞ treatments
    final randomData = RandomService.instance.selectRandomTreatments(
      settings.selectedPainPointIds,
    );

    if (randomData == null) return;

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á NotificationSession
    final session = NotificationSession(
      id: _uuid.v4(),
      scheduledTime: nextTime,
      painPointId: randomData['painPoint'].id,
      treatmentIds: randomData['treatments'].map<int>((t) => t.id).toList(),
    );

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á database
    await DatabaseService.instance.saveNotificationSession(session);

    // ‡∏ï‡∏±‡πâ‡∏á alarm
    await _scheduleNotification(session, randomData['painPoint'].name);
  }

  /// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
  DateTime? _calculateNextNotificationTime(UserSettings settings) {
    final now = DateTime.now();
    var nextTime = now.add(Duration(minutes: settings.intervalMinutes));

    // ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏´‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    for (int attempts = 0; attempts < 10; attempts++) {
      // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (!settings.workDays.contains(nextTime.weekday)) {
        nextTime = _findNextWorkDay(nextTime, settings.workDays);
        continue;
      }

      // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (!_isInWorkingHours(nextTime, settings)) {
        nextTime = _adjustToWorkingHours(nextTime, settings);
        continue;
      }

      // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏û‡∏±‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (_isInBreakPeriod(nextTime, settings.breakPeriods)) {
        nextTime = _skipBreakPeriod(nextTime, settings.breakPeriods);
        continue;
      }

      // ‡∏ñ‡πâ‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
      return nextTime;
    }

    return null; // ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
  }

  /// ‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
  DateTime _findNextWorkDay(DateTime current, List<int> workDays) {
    var next = DateTime(current.year, current.month, current.day + 1, 9, 0);

    while (!workDays.contains(next.weekday)) {
      next = next.add(const Duration(days: 1));
    }

    return next;
  }

  /// ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  bool _isInWorkingHours(DateTime time, UserSettings settings) {
    final timeMinutes = time.hour * 60 + time.minute;
    final startMinutes =
        settings.workStartTime.hour * 60 + settings.workStartTime.minute;
    final endMinutes =
        settings.workEndTime.hour * 60 + settings.workEndTime.minute;

    return timeMinutes >= startMinutes && timeMinutes <= endMinutes;
  }

  /// ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
  DateTime _adjustToWorkingHours(DateTime time, UserSettings settings) {
    final timeMinutes = time.hour * 60 + time.minute;
    final startMinutes =
        settings.workStartTime.hour * 60 + settings.workStartTime.minute;

    if (timeMinutes < startMinutes) {
      // ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô -> ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
      return DateTime(
        time.year,
        time.month,
        time.day,
        settings.workStartTime.hour,
        settings.workStartTime.minute,
      );
    } else {
      // ‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô -> ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
      return _findNextWorkDay(
          time, DatabaseService.instance.getUserSettings().workDays);
    }
  }

  /// ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏û‡∏±‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  bool _isInBreakPeriod(DateTime time, List<BreakPeriod> breakPeriods) {
    for (final breakPeriod in breakPeriods) {
      if (breakPeriod.isActive && breakPeriod.isCurrentlyInBreak()) {
        return true;
      }
    }
    return false;
  }

  /// ‡∏Ç‡πâ‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å
  DateTime _skipBreakPeriod(DateTime time, List<BreakPeriod> breakPeriods) {
    for (final breakPeriod in breakPeriods) {
      if (breakPeriod.isActive && breakPeriod.isCurrentlyInBreak()) {
        // ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏´‡∏•‡∏±‡∏á‡∏ä‡πà‡∏ß‡∏á‡∏û‡∏±‡∏Å
        return DateTime(
          time.year,
          time.month,
          time.day,
          breakPeriod.endTime.hour,
          breakPeriod.endTime.minute,
        ).add(const Duration(minutes: 5)); // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠ 5 ‡∏ô‡∏≤‡∏ó‡∏µ
      }
    }
    return time;
  }

  /// ‡∏ï‡∏±‡πâ‡∏á notification ‡∏à‡∏£‡∏¥‡∏á
  Future<void> _scheduleNotification(
      NotificationSession session, String painPointName) async {
    const androidDetails = AndroidNotificationDetails(
      'office_syndrome_channel',
      'Office Syndrome Notifications',
      channelDescription: 'Notifications for exercise reminders',
      importance: Importance.high,
      priority: Priority.high,
      showWhen: true,
      enableVibration: true,
      playSound: true,
    );

    const iosDetails = DarwinNotificationDetails(
      presentAlert: true,
      presentBadge: true,
      presentSound: true,
    );

    const details = NotificationDetails(
      android: androidDetails,
      iOS: iosDetails,
    );

    await _notifications.zonedSchedule(
      session.id.hashCode, // Use hashCode as int ID
      '‚è∞ ‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏π‡πÅ‡∏•: $painPointName',
      '‡∏Å‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢ üí™',
      tz.TZDateTime.from(session.scheduledTime, tz.local),
      details,
      payload: session.id,
      androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
    );

    debugPrint('üîî Notification scheduled for: ${session.scheduledTime}');
  }

  /// ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  Future<void> cancelAllNotifications() async {
    await _notifications.cancelAll();
    debugPrint('üîï All notifications cancelled');
  }

  /// ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞
  Future<void> cancelNotification(String sessionId) async {
    await _notifications.cancel(sessionId.hashCode);
    debugPrint('üîï Notification cancelled: $sessionId');
  }

  /// ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  Future<void> snoozeNotification(String sessionId, int minutes) async {
    final session = DatabaseService.instance.getNotificationSession(sessionId);
    if (session == null) return;

    // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å notification ‡πÄ‡∏î‡∏¥‡∏°
    await cancelNotification(sessionId);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á session ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ
    final snoozedSession = session.snooze(minutes);
    await DatabaseService.instance.saveNotificationSession(snoozedSession);

    // ‡∏ï‡∏±‡πâ‡∏á notification ‡πÉ‡∏´‡∏°‡πà
    final painPoint = DatabaseService.instance
        .getAllPainPoints()
        .firstWhere((p) => p.id == session.painPointId);

    await _scheduleNotification(snoozedSession, painPoint.name);
    debugPrint('üò¥ Notification snoozed for $minutes minutes');
  }

  /// ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  Future<void> skipNotification(String sessionId) async {
    final session = DatabaseService.instance.getNotificationSession(sessionId);
    if (session == null) return;

    // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å notification
    await cancelNotification(sessionId);

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô skipped
    final skippedSession = session.skip();
    await DatabaseService.instance.saveNotificationSession(skippedSession);

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    await scheduleNextNotification();
    debugPrint('‚è≠Ô∏è Notification skipped');
  }

  /// ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢
  Future<void> completeNotification(String sessionId) async {
    final session = DatabaseService.instance.getNotificationSession(sessionId);
    if (session == null) return;

    // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å notification
    await cancelNotification(sessionId);

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô completed
    final completedSession = session.markAsCompleted();
    await DatabaseService.instance.saveNotificationSession(completedSession);

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    await scheduleNextNotification();
    debugPrint('‚úÖ Notification completed');
  }
}
