import 'dart:math';
import '../models/treatment.dart'; // ‡∏•‡∏ö pain_point.dart ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ
import 'database_service.dart';

class RandomService {
  static RandomService? _instance;
  static RandomService get instance => _instance ??= RandomService._();
  RandomService._();

  final Random _random = Random();

  /// ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏õ‡∏ß‡∏î‡πÅ‡∏•‡∏∞‡∏ó‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢
  Map<String, dynamic>? selectRandomTreatments(List<int> selectedPainPointIds) {
    if (selectedPainPointIds.isEmpty) return null;

    // ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏õ‡∏ß‡∏î 1 ‡∏à‡∏∏‡∏î
    final randomPainPointId =
        selectedPainPointIds[_random.nextInt(selectedPainPointIds.length)];

    // ‡∏´‡∏≤‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏õ‡∏ß‡∏î‡∏ô‡∏±‡πâ‡∏ô
    final painPoint = DatabaseService.instance
        .getAllPainPoints()
        .firstWhere((p) => p.id == randomPainPointId);

    // ‡∏´‡∏≤ treatments ‡∏Ç‡∏≠‡∏á‡∏à‡∏∏‡∏î‡∏ô‡∏±‡πâ‡∏ô
    final availableTreatments =
        DatabaseService.instance.getTreatmentsForPainPoint(randomPainPointId);

    if (availableTreatments.isEmpty) return null;

    // ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å treatments 2 ‡∏ó‡πà‡∏≤ (‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 2)
    final selectedTreatments = _selectRandomTreatments(
        availableTreatments, min(2, availableTreatments.length));

    return {
      'painPoint': painPoint,
      'treatments': selectedTreatments,
    };
  }

  /// ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å treatments ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
  List<Treatment> _selectRandomTreatments(
      List<Treatment> treatments, int count) {
    if (treatments.length <= count) return treatments;

    // ‡∏™‡∏∏‡πà‡∏°‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
    final shuffled = List<Treatment>.from(treatments);
    shuffled.shuffle(_random);

    return shuffled.take(count).toList();
  }

  /// ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏õ‡∏ß‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ (‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡πà‡∏≠‡∏¢)
  int? selectWeightedPainPoint(List<int> selectedPainPointIds) {
    if (selectedPainPointIds.isEmpty) return null;

    // ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    final sessions = DatabaseService.instance
        .getSessionsForLastWeek(); // ‡∏•‡∏ö weeklyStats ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ

    // ‡∏ô‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡πà‡∏≠‡∏¢‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏à‡∏∏‡∏î
    final painPointCounts = <int, int>{};
    for (final id in selectedPainPointIds) {
      painPointCounts[id] = 0;
    }

    for (final session in sessions) {
      if (painPointCounts.containsKey(session.painPointId)) {
        painPointCounts[session.painPointId] =
            painPointCounts[session.painPointId]! + 1;
      }
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÅ‡∏ö‡∏ö inverse (‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≠‡∏¢ ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô)
    final maxCount = painPointCounts.values.isEmpty
        ? 0
        : painPointCounts.values.reduce((a, b) => a > b ? a : b);

    final weights = <int>[];

    for (final entry in painPointCounts.entries) {
      final weight = maxCount - entry.value + 1; // +1 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 0
      for (int i = 0; i < weight; i++) {
        weights.add(entry.key);
      }
    }

    if (weights.isEmpty) {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ ‡πÉ‡∏´‡πâ‡∏™‡∏∏‡πà‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
      return selectedPainPointIds[_random.nextInt(selectedPainPointIds.length)];
    }

    return weights[_random.nextInt(weights.length)];
  }

  /// ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å treatment ‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å
  List<Treatment> selectBalancedTreatments(
      List<Treatment> treatments, int count,
      {int? preferredDifficulty}) {
    if (treatments.length <= count) return treatments;

    // ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å
    final easyTreatments = treatments.where((t) => t.difficulty == 1).toList();
    final mediumTreatments =
        treatments.where((t) => t.difficulty == 2).toList();
    final hardTreatments = treatments.where((t) => t.difficulty == 3).toList();

    final selected = <Treatment>[];

    if (preferredDifficulty != null) {
      // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ô
      List<Treatment> preferred;
      switch (preferredDifficulty) {
        case 1:
          preferred = easyTreatments;
          break;
        case 2:
          preferred = mediumTreatments;
          break;
        case 3:
          preferred = hardTreatments;
          break;
        default:
          preferred = easyTreatments;
      }

      if (preferred.isNotEmpty) {
        preferred.shuffle(_random);
        selected.addAll(preferred.take(min(count, preferred.length)));
      }
    }

    // ‡πÄ‡∏ï‡∏¥‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
    if (selected.length < count) {
      final remaining = treatments.where((t) => !selected.contains(t)).toList();
      remaining.shuffle(_random);
      selected.addAll(remaining.take(count - selected.length));
    }

    return selected;
  }

  /// ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÄ‡∏ß‡∏•‡∏≤ (‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ä‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏ó‡πà‡∏≤‡∏á‡πà‡∏≤‡∏¢ ‡∏ä‡πà‡∏ß‡∏á‡∏ö‡πà‡∏≤‡∏¢‡πÉ‡∏ä‡πâ‡∏ó‡πà‡∏≤‡∏´‡∏ô‡∏±‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô)
  List<Treatment> selectTimeBasedTreatments(
      List<Treatment> treatments, int count) {
    if (treatments.isEmpty) return [];

    final now = DateTime.now();
    int preferredDifficulty;

    if (now.hour < 10) {
      // ‡πÄ‡∏ä‡πâ‡∏≤: ‡∏ó‡πà‡∏≤‡∏á‡πà‡∏≤‡∏¢
      preferredDifficulty = 1;
    } else if (now.hour < 15) {
      // ‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô: ‡∏ó‡πà‡∏≤‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
      preferredDifficulty = 2;
    } else {
      // ‡∏ö‡πà‡∏≤‡∏¢: ‡∏ó‡πà‡∏≤‡∏´‡∏ô‡∏±‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏î‡πâ
      preferredDifficulty = _random.nextBool() ? 2 : 3;
    }

    return selectBalancedTreatments(treatments, count,
        preferredDifficulty: preferredDifficulty);
  }

  /// ‡∏™‡∏∏‡πà‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
  List<int> generateRandomSnoozeOptions() {
    final baseOptions = [5, 10, 15, 20, 30];
    baseOptions.shuffle(_random);
    return baseOptions.take(3).toList()..sort();
  }

  /// ‡∏™‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à
  String getRandomEncouragementMessage() {
    final messages = [
      '‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! ‡∏°‡∏≤‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Å‡∏±‡∏ô‡πÄ‡∏ñ‡∏≠‡∏∞ üí™',
      '‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡∏•‡∏∏‡∏Å‡∏Ç‡∏¢‡∏±‡∏ö‡∏Å‡∏±‡∏ô‡∏´‡∏ô‡πà‡∏≠‡∏¢! üòä',
      '‡∏°‡∏≤‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÄ‡∏ö‡∏≤‡πÜ ‡∏Å‡∏±‡∏ô ‚ú®',
      '‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞ üåü',
      '‡πÅ‡∏Ñ‡πà‡∏ô‡∏¥‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÅ‡∏•‡πâ‡∏ß ‡∏à‡∏∞‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô! üéØ',
      '‡∏°‡∏≤‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏™‡∏°‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢‡∏™‡∏î‡∏ä‡∏∑‡πà‡∏ô üöÄ',
      '‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏π‡πÅ‡∏•‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß! üíö',
      '‡∏•‡∏∏‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏Å‡∏±‡∏ô‡πÄ‡∏ñ‡∏≠‡∏∞ üèÉ‚Äç‚ôÄÔ∏è',
    ];

    return messages[_random.nextInt(messages.length)];
  }
}
