// lib/models/models.dart
/// üì¶ Office Syndrome Helper - Models Export File
/// ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏° Models ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏á‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£ import

// Core Models
export 'user_settings.dart';
export 'pain_point.dart';
export 'treatment.dart';
export 'notification_session.dart';

// Generated Files (‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ build_runner)
// These will be auto-generated by Hive
// export 'user_settings.g.dart';
// export 'pain_point.g.dart';
// export 'treatment.g.dart';
// export 'notification_session.g.dart';

/// üè∑Ô∏è Model Type Definitions
/// ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Type Safety ‡πÅ‡∏•‡∏∞ Intellisense

/// User Settings Related Types
typedef UserSettingsMap = Map<String, dynamic>;
typedef PainPointsList = List<PainPoint>;
typedef WorkingHours
    = Map<String, String>; // {'start': '09:00', 'end': '17:00'}
typedef WorkingDays = List<int>; // [1,2,3,4,5] for Mon-Fri

/// Treatment Related Types
typedef TreatmentsList = List<Treatment>;
typedef TreatmentsByPainPoint = Map<String, List<Treatment>>;
typedef ExerciseDuration = int; // in minutes

/// Notification Related Types
typedef NotificationSessionsList = List<NotificationSession>;
typedef SessionStatus = String; // 'pending', 'completed', 'skipped', 'missed'
typedef SessionId = String; // UUID

/// Analytics Related Types
typedef AnalyticsData = Map<String, dynamic>;
typedef StatsMap = Map<String, dynamic>;
typedef TrendData = List<Map<String, dynamic>>;

/// üéØ Model Constants
class ModelConstants {
  // Hive Type IDs (‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏ô Models)
  static const int userSettingsTypeId = 1;
  static const int painPointTypeId = 2;
  static const int treatmentTypeId = 3;
  static const int notificationSessionTypeId = 4;

  // Pain Point IDs
  static const Map<String, int> painPointIds = {
    '‡∏®‡∏µ‡∏£‡∏©‡∏∞': 0,
    '‡∏ï‡∏≤': 1,
    '‡∏Ñ‡∏≠': 2,
    '‡∏ö‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÑ‡∏´‡∏•‡πà': 3,
    '‡∏´‡∏•‡∏±‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏ô': 4,
    '‡∏´‡∏•‡∏±‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏•‡πà‡∏≤‡∏á': 5,
    '‡πÅ‡∏Ç‡∏ô/‡∏®‡∏≠‡∏Å': 6,
    '‡∏Ç‡πâ‡∏≠‡∏°‡∏∑‡∏≠/‡∏°‡∏∑‡∏≠/‡∏ô‡∏¥‡πâ‡∏ß': 7,
    '‡∏Ç‡∏≤': 8,
    '‡πÄ‡∏ó‡πâ‡∏≤': 9,
  };

  // Session Status Values
  static const String sessionPending = 'pending';
  static const String sessionCompleted = 'completed';
  static const String sessionSkipped = 'skipped';
  static const String sessionMissed = 'missed';

  // Default Settings
  static const int defaultIntervalMinutes = 60;
  static const String defaultStartTime = '09:00';
  static const String defaultEndTime = '17:00';
  static const List<int> defaultWorkingDays = [1, 2, 3, 4, 5]; // Mon-Fri
  static const int maxPainPointSelection = 3;
  static const int defaultTreatmentCount = 2;

  // Limits
  static const int minIntervalMinutes = 15;
  static const int maxIntervalMinutes = 240; // 4 hours
  static const int maxSnoozeCount = 3;
  static const int maxSessionHistoryDays = 90;
}

/// üîß Model Utilities
class ModelUtils {
  /// ‡πÅ‡∏õ‡∏•‡∏á PainPoint list ‡πÄ‡∏õ‡πá‡∏ô String list
  static List<String> painPointsToStrings(List<PainPoint> painPoints) {
    return painPoints.map((p) => p.name).toList();
  }

  /// ‡πÅ‡∏õ‡∏•‡∏á String list ‡πÄ‡∏õ‡πá‡∏ô PainPoint list
  static List<PainPoint> stringsToPainPoints(List<String> names) {
    return names
        .map((name) => PainPoint(
              id: ModelConstants.painPointIds[name] ?? 0,
              name: name,
              isSelected: true,
            ))
        .toList();
  }

  /// ‡πÅ‡∏õ‡∏•‡∏á Treatment list ‡πÄ‡∏õ‡πá‡∏ô JSON
  static List<Map<String, dynamic>> treatmentsToJson(
      List<Treatment> treatments) {
    return treatments.map((t) => t.toJson()).toList();
  }

  /// ‡πÅ‡∏õ‡∏•‡∏á JSON ‡πÄ‡∏õ‡πá‡∏ô Treatment list
  static List<Treatment> treatmentsFromJson(List<dynamic> jsonList) {
    return jsonList.map((json) => Treatment.fromJson(json)).toList();
  }

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á NotificationSession ID ‡πÉ‡∏´‡∏°‡πà
  static String generateSessionId() {
    return DateTime.now().millisecondsSinceEpoch.toString() +
        DateTime.now().microsecond.toString();
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Session ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  static bool isValidSession(NotificationSession? session) {
    if (session == null) return false;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    if (session.id.isEmpty ||
        session.painPoint.isEmpty ||
        session.treatments.isEmpty) {
      return false;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
    final now = DateTime.now();
    final sessionAge = now.difference(session.timestamp);
    if (sessionAge.inHours > 24) {
      return false;
    }

    return true;
  }

  /// ‡∏£‡∏±‡∏ö‡∏™‡∏µ‡∏Ç‡∏≠‡∏á Pain Point
  static int getPainPointColorIndex(String painPointName) {
    return ModelConstants.painPointIds[painPointName] ?? 0;
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  static bool isWithinWorkingHours(DateTime dateTime, UserSettings settings) {
    final timeOfDay = TimeOfDay.fromDateTime(dateTime);
    final currentMinutes = timeOfDay.hour * 60 + timeOfDay.minute;

    // ‡πÅ‡∏õ‡∏•‡∏á working hours ‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ
    final startParts = settings.workingHoursStart.split(':');
    final endParts = settings.workingHoursEnd.split(':');

    final startMinutes =
        int.parse(startParts[0]) * 60 + int.parse(startParts[1]);
    final endMinutes = int.parse(endParts[0]) * 60 + int.parse(endParts[1]);

    return currentMinutes >= startMinutes && currentMinutes <= endMinutes;
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  static bool isWorkingDay(DateTime dateTime, UserSettings settings) {
    return settings.workingDays.contains(dateTime.weekday);
  }

  /// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
  static DateTime calculateNextNotification(UserSettings settings) {
    final now = DateTime.now();

    if (settings.lastNotificationTime == null) {
      // ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ
      return now.add(Duration(minutes: settings.intervalMinutes));
    }

    // ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ - ‡∏à‡∏≤‡∏Å lastNotificationTime + interval
    return settings.lastNotificationTime!
        .add(Duration(minutes: settings.intervalMinutes));
  }
}

/// üé® Model Extensions
extension UserSettingsExtension on UserSettings {
  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  bool get isComplete {
    return selectedPainPoints.isNotEmpty &&
        intervalMinutes >= ModelConstants.minIntervalMinutes &&
        intervalMinutes <= ModelConstants.maxIntervalMinutes &&
        workingHoursStart.isNotEmpty &&
        workingHoursEnd.isNotEmpty &&
        workingDays.isNotEmpty;
  }

  /// ‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Duration
  Duration get workingDuration {
    final startParts = workingHoursStart.split(':');
    final endParts = workingHoursEnd.split(':');

    final startMinutes =
        int.parse(startParts[0]) * 60 + int.parse(startParts[1]);
    final endMinutes = int.parse(endParts[0]) * 60 + int.parse(endParts[1]);

    return Duration(minutes: endMinutes - startMinutes);
  }

  /// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô
  int get notificationsPerDay {
    final workingMinutes = workingDuration.inMinutes;
    return (workingMinutes / intervalMinutes).floor();
  }
}

extension NotificationSessionExtension on NotificationSession {
  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Session ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  bool get isCompleted => status == ModelConstants.sessionCompleted;

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Session ‡∏ñ‡∏π‡∏Å‡∏Ç‡πâ‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  bool get isSkipped => status == ModelConstants.sessionSkipped;

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Session ‡∏û‡∏•‡∏≤‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  bool get isMissed => status == ModelConstants.sessionMissed;

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Session ‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  bool get isPending => status == ModelConstants.sessionPending;

  /// ‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á Session
  Duration get age => DateTime.now().difference(timestamp);

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Session ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
  bool get isExpired => age.inHours >= 1;

  /// ‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢
  int get treatmentCount => treatments.length;

  /// ‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢
  int get totalDurationMinutes {
    return treatments.fold(
        0, (sum, treatment) => sum + (treatment.durationMinutes ?? 0));
  }
}

extension TreatmentExtension on Treatment {
  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  bool get hasImage => imageUrl != null && imageUrl!.isNotEmpty;

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  bool get hasDescription => description.isNotEmpty;

  /// ‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Duration
  Duration get duration => Duration(minutes: durationMinutes ?? 0);

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡πà‡∏≤‡∏á‡πà‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 3 ‡∏ô‡∏≤‡∏ó‡∏µ)
  bool get isEasy => (durationMinutes ?? 0) <= 3;

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡πà‡∏≤‡∏¢‡∏≤‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 5 ‡∏ô‡∏≤‡∏ó‡∏µ)
  bool get isHard => (durationMinutes ?? 0) > 5;
}
